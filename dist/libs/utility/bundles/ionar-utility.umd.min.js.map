{"version":3,"sources":["ng://@ionar/utility/observables/take-until-destroy.ts"],"names":["isFunction","value","componentInstance","destroyMethodName","source","originalDestroy","Error","constructor","name","Subject","apply","this","arguments","next","complete","pipe","takeUntil"],"mappings":"qUAGA,SAASA,EAAWC,GAChB,MAAwB,mBAAVA,mBAGY,SAC1BC,EACAC,GACC,YADD,IAAAA,IAAAA,EAAA,eACC,SAAIC,OACCC,EAAkBH,EAAkBC,GAC1C,IAAoC,IAAhCH,EAAWK,GACX,MAAM,IAAIC,MAEFJ,EAAkBK,YAAYC,KAAI,kDACgBL,GAa9D,OAVKD,EAAsC,qBACvCA,EAAsC,mBAClCA,EAAsC,oBAAK,IAAIO,EAAAA,QAEnDP,EAAkBC,GAAqB,WACnCH,EAAWK,IAAoBA,EAAgBK,MAAMC,KAAMC,WAC3DV,EAAsC,mBAAEW,MAAK,GAC7CX,EAAsC,mBAAEY,aAGzCV,EAAOW,KAAKC,EAAAA,UAAad,EAAsC","sourcesContent":["import {Observable, Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\n\r\nfunction isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\n\r\nexport const untilDestroyed = (\r\n    componentInstance,\r\n    destroyMethodName = 'ngOnDestroy'\r\n) => <T>(source: Observable<T>) => {\r\n    const originalDestroy = componentInstance[destroyMethodName];\r\n    if (isFunction(originalDestroy) === false) {\r\n        throw new Error(\r\n            `${\r\n                componentInstance.constructor.name\r\n                } is using untilDestroyed but doesn't implement ${destroyMethodName}`\r\n        );\r\n    }\r\n    if (!componentInstance['__takeUntilDestroy']) {\r\n        componentInstance['__takeUntilDestroy'] =\r\n            componentInstance['__takeUntilDestroy'] || new Subject();\r\n\r\n        componentInstance[destroyMethodName] = function () {\r\n            isFunction(originalDestroy) && originalDestroy.apply(this, arguments);\r\n            componentInstance['__takeUntilDestroy'].next(true);\r\n            componentInstance['__takeUntilDestroy'].complete();\r\n        };\r\n    }\r\n    return source.pipe(takeUntil<T>(componentInstance['__takeUntilDestroy']));\r\n};"]}