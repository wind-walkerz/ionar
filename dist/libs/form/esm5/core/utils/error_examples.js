/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
export var FormErrorExamples = {
    formControlName: "\n    <io-form [formGroup]=\"myGroup\">\n      <form-control [name]=\" 'firstName' \"></form-control>\n    </io-form>\n\n    In your class:\n\n    constructor( private _fb: IonarFormBuilder){}\n\n    this.myGroup = this._fb.group({\n        firstName: {\n            component: 'input',\n            props: {\n                value: 'YourName'\n            },\n            validators: {\n                required: true\n            }\n        }\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JfZXhhbXBsZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9uYXIvZm9ybS8iLCJzb3VyY2VzIjpbImNvcmUvdXRpbHMvZXJyb3JfZXhhbXBsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsTUFBTSxLQUFPLGlCQUFpQixHQUFHO0lBQy9CLGVBQWUsRUFBRSx1Y0FtQlg7SUFJTixhQUFhLEVBQUUsNlJBV1Q7SUFFTixhQUFhLEVBQUUsc1lBY1Q7SUFFTixZQUFZLEVBQUUsa0pBS0o7SUFFVixvQkFBb0IsRUFBRSw0TEFLckI7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxyXG4gKi9cclxuXHJcbmV4cG9ydCBjb25zdCBGb3JtRXJyb3JFeGFtcGxlcyA9IHtcclxuICBmb3JtQ29udHJvbE5hbWU6IGBcclxuICAgIDxpby1mb3JtIFtmb3JtR3JvdXBdPVwibXlHcm91cFwiPlxyXG4gICAgICA8Zm9ybS1jb250cm9sIFtuYW1lXT1cIiAnZmlyc3ROYW1lJyBcIj48L2Zvcm0tY29udHJvbD5cclxuICAgIDwvaW8tZm9ybT5cclxuXHJcbiAgICBJbiB5b3VyIGNsYXNzOlxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCBwcml2YXRlIF9mYjogSW9uYXJGb3JtQnVpbGRlcil7fVxyXG5cclxuICAgIHRoaXMubXlHcm91cCA9IHRoaXMuX2ZiLmdyb3VwKHtcclxuICAgICAgICBmaXJzdE5hbWU6IHtcclxuICAgICAgICAgICAgY29tcG9uZW50OiAnaW5wdXQnLFxyXG4gICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdZb3VyTmFtZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdmFsaWRhdG9yczoge1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO2AsXHJcblxyXG5cclxuXHJcbiAgZm9ybUdyb3VwTmFtZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cIm15R3JvdXBcIj5cclxuICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cInBlcnNvblwiPlxyXG4gICAgICAgICAgPGlucHV0IGZvcm1Db250cm9sTmFtZT1cImZpcnN0TmFtZVwiPlxyXG4gICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICBJbiB5b3VyIGNsYXNzOlxyXG5cclxuICAgIHRoaXMubXlHcm91cCA9IG5ldyBGb3JtR3JvdXAoe1xyXG4gICAgICAgcGVyc29uOiBuZXcgRm9ybUdyb3VwKHsgZmlyc3ROYW1lOiBuZXcgRm9ybUNvbnRyb2woKSB9KVxyXG4gICAgfSk7YCxcclxuXHJcbiAgZm9ybUFycmF5TmFtZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cIm15R3JvdXBcIj5cclxuICAgICAgPGRpdiBmb3JtQXJyYXlOYW1lPVwiY2l0aWVzXCI+XHJcbiAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgY2l0eSBvZiBjaXR5QXJyYXkuY29udHJvbHM7IGluZGV4IGFzIGlcIj5cclxuICAgICAgICAgIDxpbnB1dCBbZm9ybUNvbnRyb2xOYW1lXT1cImlcIj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICBJbiB5b3VyIGNsYXNzOlxyXG5cclxuICAgIHRoaXMuY2l0eUFycmF5ID0gbmV3IEZvcm1BcnJheShbbmV3IEZvcm1Db250cm9sKCdTRicpXSk7XHJcbiAgICB0aGlzLm15R3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcclxuICAgICAgY2l0aWVzOiB0aGlzLmNpdHlBcnJheVxyXG4gICAgfSk7YCxcclxuXHJcbiAgbmdNb2RlbEdyb3VwOiBgXHJcbiAgICA8Zm9ybT5cclxuICAgICAgIDxkaXYgbmdNb2RlbEdyb3VwPVwicGVyc29uXCI+XHJcbiAgICAgICAgICA8aW5wdXQgWyhuZ01vZGVsKV09XCJwZXJzb24ubmFtZVwiIG5hbWU9XCJmaXJzdE5hbWVcIj5cclxuICAgICAgIDwvZGl2PlxyXG4gICAgPC9mb3JtPmAsXHJcblxyXG4gIG5nTW9kZWxXaXRoRm9ybUdyb3VwOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwibXlHcm91cFwiPlxyXG4gICAgICAgPGlucHV0IGZvcm1Db250cm9sTmFtZT1cImZpcnN0TmFtZVwiPlxyXG4gICAgICAgPGlucHV0IFsobmdNb2RlbCldPVwic2hvd01vcmVDb250cm9sc1wiIFtuZ01vZGVsT3B0aW9uc109XCJ7c3RhbmRhbG9uZTogdHJ1ZX1cIj5cclxuICAgIDwvZGl2PlxyXG4gIGBcclxufTtcclxuIl19