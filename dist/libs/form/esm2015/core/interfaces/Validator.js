/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function JoiError() { }
if (false) {
    /**
     * string with a description of the error
     * @type {?}
     */
    JoiError.prototype.message;
    /**
     * ordered array where each element is the accessor to the value where the error happened
     * @type {?}
     */
    JoiError.prototype.path;
    /**
     * type of the error
     * @type {?}
     */
    JoiError.prototype.type;
    /**
     *  Object providing context of the error containing at least:
     *  key - key of the value that errored, equivalent to the last element of details.path.
     * label - label of the value that errored, or the key if any, or the default language.root.
     *
     *
     * @type {?}
     */
    JoiError.prototype.context;
}
/**
 * \@publicApi
 * @record
 */
export function AsyncValidatorFn() { }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlvbmFyL2Zvcm0vIiwic291cmNlcyI6WyJjb3JlL2ludGVyZmFjZXMvVmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQSw4QkFpQkM7Ozs7OztJQWZDLDJCQUFnQjs7Ozs7SUFHaEIsd0JBQW1DOzs7OztJQUduQyx3QkFBYTs7Ozs7Ozs7O0lBUWIsMkJBQVc7Ozs7OztBQVNiLHNDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnLi4vbW9kZWxzL0Fic3RyYWN0Q29udHJvbCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpvaUVycm9yIHtcclxuICAvKipzdHJpbmcgd2l0aCBhIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciovXHJcbiAgbWVzc2FnZTogc3RyaW5nLFxyXG5cclxuICAvKiogb3JkZXJlZCBhcnJheSB3aGVyZSBlYWNoIGVsZW1lbnQgaXMgdGhlIGFjY2Vzc29yIHRvIHRoZSB2YWx1ZSB3aGVyZSB0aGUgZXJyb3IgaGFwcGVuZWQgKi9cclxuICBwYXRoOiAoc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sKVtdLFxyXG5cclxuICAvKiogdHlwZSBvZiB0aGUgZXJyb3IgKi9cclxuICB0eXBlOiBzdHJpbmcsXHJcblxyXG4gIC8qKlxyXG4gICAqICBPYmplY3QgcHJvdmlkaW5nIGNvbnRleHQgb2YgdGhlIGVycm9yIGNvbnRhaW5pbmcgYXQgbGVhc3Q6XHJcbiAgICogIGtleSAtIGtleSBvZiB0aGUgdmFsdWUgdGhhdCBlcnJvcmVkLCBlcXVpdmFsZW50IHRvIHRoZSBsYXN0IGVsZW1lbnQgb2YgZGV0YWlscy5wYXRoLlxyXG4gICAqbGFiZWwgLSBsYWJlbCBvZiB0aGUgdmFsdWUgdGhhdCBlcnJvcmVkLCBvciB0aGUga2V5IGlmIGFueSwgb3IgdGhlIGRlZmF1bHQgbGFuZ3VhZ2Uucm9vdC5cclxuICAgKlxyXG4gICAqICovXHJcbiAgY29udGV4dDoge31cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgSm9pU2NoZW1hID0geyBpc0pvaTogdHJ1ZSB9XHJcblxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXN5bmNWYWxpZGF0b3JGbiB7XHJcbiAgKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IE9ic2VydmFibGU8Sm9pRXJyb3IgfCBudWxsPjtcclxufVxyXG5cclxuLy8gLyoqXHJcbi8vICAqIEBkZXNjcmlwdGlvblxyXG4vLyAgKiBQcm92aWRlcyBhIHNldCBvZiBidWlsdC1pbiB2YWxpZGF0b3JzIHRoYXQgY2FuIGJlIHVzZWQgYnkgZm9ybSBjb250cm9scy5cclxuLy8gICpcclxuLy8gICogQSB2YWxpZGF0b3IgaXMgYSBmdW5jdGlvbiB0aGF0IHByb2Nlc3NlcyBhIGBBYnN0cmFjdENvbnRyb2xgIG9yIGNvbGxlY3Rpb24gb2ZcclxuLy8gICogY29udHJvbHMgYW5kIHJldHVybnMgYW4gZXJyb3IgbWFwIG9yIG51bGwuIEEgbnVsbCBtYXAgbWVhbnMgdGhhdCB2YWxpZGF0aW9uIGhhcyBwYXNzZWQuXHJcbi8vICAqIEBwdWJsaWNBcGlcclxuLy8gICovXHJcbi8vIC8vIEBkeW5hbWljXHJcbi8vIGV4cG9ydCBjbGFzcyBWYWxpZGF0b3JzIHtcclxuLy9cclxuLy8gICAvKipcclxuLy8gICAgKiBAZGVzY3JpcHRpb25cclxuLy8gICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyB0aGUgY29udHJvbCBoYXZlIGEgbm9uLWVtcHR5IHZhbHVlLlxyXG4vLyAgICAqXHJcbi8vICAgICogQHVzYWdlTm90ZXNcclxuLy8gICAgKlxyXG4vLyAgICAqICMjIyBWYWxpZGF0ZSB0aGF0IHRoZSBmaWVsZCBpcyBub24tZW1wdHlcclxuLy8gICAgKlxyXG4vLyAgICAqIGBgYHR5cGVzY3JpcHRcclxuLy8gICAgKiBjb25zdCBjb250cm9sID0gbmV3IEFic3RyYWN0Q29udHJvbCgnJywgVmFsaWRhdG9ycy5yZXF1aXJlZCk7XHJcbi8vICAgICpcclxuLy8gICAgKiBjb25zb2xlLmxvZyhjb250cm9sLmVycm9ycyk7IC8vIHtyZXF1aXJlZDogdHJ1ZX1cclxuLy8gICAgKiBgYGBcclxuLy8gICAgKlxyXG4vLyAgICAqIEByZXR1cm5zIEFuIGVycm9yIG1hcCB3aXRoIHRoZSBgcmVxdWlyZWRgIHByb3BlcnR5XHJcbi8vICAgICogaWYgdGhlIHZhbGlkYXRpb24gY2hlY2sgZmFpbHMsIG90aGVyd2lzZSBgbnVsbGAuXHJcbi8vICAgICpcclxuLy8gICAgKi9cclxuLy8gICBzdGF0aWMgcmVxdWlyZWQgPSAoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT5cclxuLy8gICAgIGlzRW1wdHlJbnB1dFZhbHVlKGMudmFsdWUpID8geyAncmVxdWlyZWQnOiB0cnVlIH0gOiBudWxsO1xyXG4vL1xyXG4vLyAgIC8qKlxyXG4vLyAgICAqIEBkZXNjcmlwdGlvblxyXG4vLyAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIHRoZSBjb250cm9sJ3MgdmFsdWUgcGFzcyBhbiBlbWFpbCB2YWxpZGF0aW9uIHRlc3QuXHJcbi8vICAgICpcclxuLy8gICAgKiBAdXNhZ2VOb3Rlc1xyXG4vLyAgICAqXHJcbi8vICAgICogIyMjIFZhbGlkYXRlIHRoYXQgdGhlIGZpZWxkIG1hdGNoZXMgYSB2YWxpZCBlbWFpbCBwYXR0ZXJuXHJcbi8vICAgICpcclxuLy8gICAgKiBgYGB0eXBlc2NyaXB0XHJcbi8vICAgICogY29uc3QgY29udHJvbCA9IG5ldyBBYnN0cmFjdENvbnRyb2woJ2JhZEAnLCBWYWxpZGF0b3JzLmVtYWlsKTtcclxuLy8gICAgKlxyXG4vLyAgICAqIGNvbnNvbGUubG9nKGNvbnRyb2wuZXJyb3JzKTsgLy8ge2VtYWlsOiB0cnVlfVxyXG4vLyAgICAqIGBgYFxyXG4vLyAgICAqXHJcbi8vICAgICogQHJldHVybnMgQW4gZXJyb3IgbWFwIHdpdGggdGhlIGBlbWFpbGAgcHJvcGVydHlcclxuLy8gICAgKiBpZiB0aGUgdmFsaWRhdGlvbiBjaGVjayBmYWlscywgb3RoZXJ3aXNlIGBudWxsYC5cclxuLy8gICAgKlxyXG4vLyAgICAqL1xyXG4vLyAgIHN0YXRpYyBlbWFpbCA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbi8vXHJcbi8vICAgICBpZiAoaXNFbXB0eUlucHV0VmFsdWUoY29udHJvbC52YWx1ZSkpIHtcclxuLy8gICAgICAgcmV0dXJuIG51bGw7ICAvLyBkb24ndCB2YWxpZGF0ZSBlbXB0eSB2YWx1ZXMgdG8gYWxsb3cgb3B0aW9uYWwgY29udHJvbHNcclxuLy8gICAgIH1cclxuLy8gICAgIHJldHVybiBFTUFJTF9SRUdFWFAudGVzdChjb250cm9sLnZhbHVlKSA/IG51bGwgOiB7ICdlbWFpbCc6IHRydWUgfTtcclxuLy8gICB9O1xyXG4vL1xyXG4vL1xyXG4vLyAgIC8qKlxyXG4vLyAgICAqIEBkZXNjcmlwdGlvblxyXG4vLyAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIHRoZSBsZW5ndGggb2YgdGhlIGNvbnRyb2wncyB2YWx1ZSB0byBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWxcclxuLy8gICAgKiB0byB0aGUgcHJvdmlkZWQgbWluaW11bSBsZW5ndGguIFRoaXMgdmFsaWRhdG9yIGlzIGFsc28gcHJvdmlkZWQgYnkgZGVmYXVsdCBpZiB5b3UgdXNlIHRoZVxyXG4vLyAgICAqIHRoZSBIVE1MNSBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUuXHJcbi8vICAgICpcclxuLy8gICAgKiBAdXNhZ2VOb3Rlc1xyXG4vLyAgICAqXHJcbi8vICAgICogIyMjIFZhbGlkYXRlIHRoYXQgdGhlIGZpZWxkIGhhcyBhIG1pbmltdW0gb2YgMyBjaGFyYWN0ZXJzXHJcbi8vICAgICpcclxuLy8gICAgKiBgYGB0eXBlc2NyaXB0XHJcbi8vICAgICogY29uc3QgY29udHJvbCA9IG5ldyBBYnN0cmFjdENvbnRyb2woJ25nJywgVmFsaWRhdG9ycy5taW5MZW5ndGgoMykpO1xyXG4vLyAgICAqXHJcbi8vICAgICogY29uc29sZS5sb2coY29udHJvbC5lcnJvcnMpOyAvLyB7bWlubGVuZ3RoOiB7cmVxdWlyZWRMZW5ndGg6IDMsIGFjdHVhbExlbmd0aDogMn19XHJcbi8vICAgICogYGBgXHJcbi8vICAgICpcclxuLy8gICAgKiBgYGBodG1sXHJcbi8vICAgICogPGlucHV0IG1pbmxlbmd0aD1cIjVcIj5cclxuLy8gICAgKiBgYGBcclxuLy8gICAgKlxyXG4vLyAgICAqIEByZXR1cm5zIEEgdmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlcnJvciBtYXAgd2l0aCB0aGVcclxuLy8gICAgKiBgbWlubGVuZ3RoYCBpZiB0aGUgdmFsaWRhdGlvbiBjaGVjayBmYWlscywgb3RoZXJ3aXNlIGBudWxsYC5cclxuLy8gICAgKi9cclxuLy8gICBzdGF0aWMgc3RyaW5nTGVuZ3RoID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuLy8gICAgIGNvbnN0IHN0YXRlID0gPEZvcm1Db250cm9sU3RhdGU+Y29udHJvbC5zdGF0ZTtcclxuLy9cclxuLy8gICAgIGlmIChpc0VtcHR5SW5wdXRWYWx1ZShjb250cm9sLnZhbHVlKSkge1xyXG4vLyAgICAgICByZXR1cm4gbnVsbDsgIC8vIGRvbid0IHZhbGlkYXRlIGVtcHR5IHZhbHVlcyB0byBhbGxvdyBvcHRpb25hbCBjb250cm9sc1xyXG4vLyAgICAgfVxyXG4vL1xyXG4vLyAgICAgaWYgKHN0YXRlLmNvbXBvbmVudCAhPT0gKCdpbnB1dCcgfHwgJ3RleHRhcmVhJykpIHtcclxuLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKGAnc3RyaW5nTGVuZ3RoJyB2YWxpZGF0b3IgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGNvbnRyb2wgdHlwZSAnaW5wdXQnIG9yICd0ZXh0YXJlYSdgKTtcclxuLy8gICAgIH1cclxuLy9cclxuLy8gICAgIGNvbnN0XHJcbi8vICAgICAgIG1pbjogbnVtYmVyID0gc3RhdGUudmFsaWRhdG9yc1snc3RyaW5nTGVuZ3RoJ10ubWluLFxyXG4vLyAgICAgICBtYXg6IG51bWJlciA9IHN0YXRlLnZhbGlkYXRvcnNbJ3N0cmluZ0xlbmd0aCddLm1heCxcclxuLy8gICAgICAgbGVuZ3RoOiBudW1iZXIgPSBjb250cm9sLnZhbHVlID8gY29udHJvbC52YWx1ZS5sZW5ndGggOiAwO1xyXG4vL1xyXG4vLyAgICAgaWYgKGxlbmd0aCA8IG1pbikge1xyXG4vLyAgICAgICByZXR1cm4ge1xyXG4vLyAgICAgICAgICdzdHJpbmdMZW5ndGgnOiB7XHJcbi8vICAgICAgICAgICAnbWluTGVuZ3RoJzogbWluLFxyXG4vLyAgICAgICAgICAgJ2FjdHVhbExlbmd0aCc6IGxlbmd0aFxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgfTtcclxuLy8gICAgIH1cclxuLy9cclxuLy8gICAgIGlmIChsZW5ndGggPiBtYXgpIHtcclxuLy8gICAgICAgcmV0dXJuIHtcclxuLy8gICAgICAgICAnc3RyaW5nTGVuZ3RoJzoge1xyXG4vLyAgICAgICAgICAgJ21heExlbmd0aCc6IG1heCxcclxuLy8gICAgICAgICAgICdhY3R1YWxMZW5ndGgnOiBsZW5ndGhcclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgIH07XHJcbi8vICAgICB9XHJcbi8vXHJcbi8vICAgICByZXR1cm4gbnVsbDtcclxuLy8gICB9O1xyXG4vL1xyXG4vL1xyXG4vLyAgIHN0YXRpYyBlcXVhbFRvID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuLy9cclxuLy8gICAgIGlmIChpc0VtcHR5SW5wdXRWYWx1ZShjb250cm9sLnZhbHVlKSkge1xyXG4vLyAgICAgICByZXR1cm4gbnVsbDsgIC8vIGRvbid0IHZhbGlkYXRlIGVtcHR5IHZhbHVlcyB0byBhbGxvdyBvcHRpb25hbCBjb250cm9sc1xyXG4vLyAgICAgfVxyXG4vL1xyXG4vLyAgICAgY29uc3Qgc3RhdGUgPSA8Rm9ybUNvbnRyb2xTdGF0ZT5jb250cm9sLnN0YXRlO1xyXG4vL1xyXG4vLyAgICAgY29uc3QgY29tcGFyZVdpdGggPSBfLmlzU3RyaW5nKHN0YXRlLnZhbGlkYXRvcnNbJ2VxdWFsVG8nXSkgPyBzdGF0ZS52YWxpZGF0b3JzWydlcXVhbFRvJ10gOiBzdGF0ZS52YWxpZGF0b3JzWydlcXVhbFRvJ10uY29tcGFyZTtcclxuLy9cclxuLy8gICAgIGNvbnN0IGNvbXBhcmVkX2NvbnRyb2wgPSBjb250cm9sLnBhcmVudC5jb250cm9sc1tjb21wYXJlV2l0aF07XHJcbi8vXHJcbi8vICAgICByZXR1cm4gKEpTT04uc3RyaW5naWZ5KGNvbnRyb2wudmFsdWUpID09PSBKU09OLnN0cmluZ2lmeShjb21wYXJlZF9jb250cm9sLnZhbHVlKSlcclxuLy8gICAgICAgPyBudWxsIDogeyBlcXVhbFRvOiBzdGF0ZS52YWxpZGF0b3JzWydlcXVhbFRvJ10gfTtcclxuLy8gICB9O1xyXG4vL1xyXG4vL1xyXG4vLyAgIC8qKlxyXG4vLyAgICAqIEBkZXNjcmlwdGlvblxyXG4vLyAgICAqIENvbXBvc2UgbXVsdGlwbGUgdmFsaWRhdG9ycyBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdW5pb25cclxuLy8gICAgKiBvZiB0aGUgaW5kaXZpZHVhbCBlcnJvciBtYXBzIGZvciB0aGUgcHJvdmlkZWQgY29udHJvbC5cclxuLy8gICAgKlxyXG4vLyAgICAqIEByZXR1cm5zIEEgdmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlcnJvciBtYXAgd2l0aCB0aGVcclxuLy8gICAgKiBtZXJnZWQgZXJyb3IgbWFwcyBvZiB0aGUgdmFsaWRhdG9ycyBpZiB0aGUgdmFsaWRhdGlvbiBjaGVjayBmYWlscywgb3RoZXJ3aXNlIGBudWxsYC5cclxuLy8gICAgKi9cclxuLy8gICBzdGF0aWMgY29tcG9zZSA9ICh2YWxpZGF0b3JzOiAoVmFsaWRhdG9yRm4gfCBudWxsIHwgdW5kZWZpbmVkKVtdIHwgbnVsbCk6IFZhbGlkYXRvckZuIHwgbnVsbCA9PiB7XHJcbi8vICAgICBpZiAoIXZhbGlkYXRvcnMpIHJldHVybiBudWxsO1xyXG4vLyAgICAgY29uc3QgcHJlc2VudFZhbGlkYXRvcnM6IFZhbGlkYXRvckZuW10gPSB2YWxpZGF0b3JzLmZpbHRlcihpc1ByZXNlbnQpIGFzIGFueTtcclxuLy8gICAgIGlmIChwcmVzZW50VmFsaWRhdG9ycy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xyXG4vL1xyXG4vLyAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkge1xyXG4vLyAgICAgICByZXR1cm4gX21lcmdlRXJyb3JzKF9leGVjdXRlVmFsaWRhdG9ycyhjb250cm9sLCBwcmVzZW50VmFsaWRhdG9ycykpO1xyXG4vLyAgICAgfTtcclxuLy8gICB9O1xyXG4vL1xyXG4vLyAgIC8qKlxyXG4vLyAgICAqIEBkZXNjcmlwdGlvblxyXG4vLyAgICAqIENvbXBvc2UgbXVsdGlwbGUgYXN5bmMgdmFsaWRhdG9ycyBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdW5pb25cclxuLy8gICAgKiBvZiB0aGUgaW5kaXZpZHVhbCBlcnJvciBvYmplY3RzIGZvciB0aGUgcHJvdmlkZWQgY29udHJvbC5cclxuLy8gICAgKlxyXG4vLyAgICAqIEByZXR1cm5zIEEgdmFsaWRhdG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBlcnJvciBtYXAgd2l0aCB0aGVcclxuLy8gICAgKiBtZXJnZWQgZXJyb3Igb2JqZWN0cyBvZiB0aGUgYXN5bmMgdmFsaWRhdG9ycyBpZiB0aGUgdmFsaWRhdGlvbiBjaGVjayBmYWlscywgb3RoZXJ3aXNlIGBudWxsYC5cclxuLy8gICAgKi9cclxuLy8gICBzdGF0aWMgY29tcG9zZUFzeW5jKGFzeW5jVmFsaWRhdG9yczogQXN5bmNWYWxpZGF0b3JGbltdKTogQXN5bmNWYWxpZGF0b3JGbiB8IG51bGwge1xyXG4vLyAgICAgaWYgKCFhc3luY1ZhbGlkYXRvcnMpIHJldHVybiBudWxsO1xyXG4vLyAgICAgY29uc3QgcHJlc2VudFZhbGlkYXRvcnM6IEFzeW5jVmFsaWRhdG9yRm5bXSA9IGFzeW5jVmFsaWRhdG9ycy5maWx0ZXIoaXNQcmVzZW50KSBhcyBhbnk7XHJcbi8vICAgICBpZiAocHJlc2VudFZhbGlkYXRvcnMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuLy9cclxuLy8gICAgIHJldHVybiBmdW5jdGlvbihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcclxuLy8gICAgICAgY29uc3Qgb2JzZXJ2YWJsZXMgPSBfZXhlY3V0ZUFzeW5jVmFsaWRhdG9ycyhjb250cm9sLCBwcmVzZW50VmFsaWRhdG9ycyk7XHJcbi8vXHJcbi8vICAgICAgIHJldHVybiBmb3JrSm9pbihvYnNlcnZhYmxlcykucGlwZShcclxuLy8gICAgICAgICBtYXAoX21lcmdlRXJyb3JzKVxyXG4vLyAgICAgICApO1xyXG4vL1xyXG4vLyAgICAgfTtcclxuLy8gICB9XHJcbi8vXHJcbi8vXHJcbi8vICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4vLyAgIF9pc0JveGVkVmFsdWUodmFsaWRhdG9yX2NvbmZpZ3M6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCB0cnVlIHwgVmFsaWRhdG9yRm4gfCBBc3luY1ZhbGlkYXRvckZuKTogYm9vbGVhbiB7XHJcbi8vICAgICByZXR1cm4gXy5pc1BsYWluT2JqZWN0KHZhbGlkYXRvcl9jb25maWdzKTtcclxuLy8gICB9XHJcbi8vXHJcbi8vXHJcbi8vIH1cclxuXHJcbi8vXHJcbi8vIGNvbnN0IEVNQUlMX1JFR0VYUCA9XHJcbi8vICAgL14oPz0uezEsMjU0fSQpKD89LnsxLDY0fUApWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKyhcXC5bLSEjJCUmJyorLzAtOT0/QS1aXl9gYS16e3x9fl0rKSpAW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPyhcXC5bQS1aYS16MC05XShbQS1aYS16MC05LV17MCw2MX1bQS1aYS16MC05XSk/KSokLztcclxuXHJcblxyXG4vLyBmdW5jdGlvbiBpc0VtcHR5SW5wdXRWYWx1ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbi8vICAgLy8gd2UgZG9uJ3QgY2hlY2sgZm9yIHN0cmluZyBoZXJlIHNvIGl0IGFsc28gd29ya3Mgd2l0aCBhcnJheXNcclxuLy8gICByZXR1cm4gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XHJcbi8vIH1cclxuLy9cclxuLy8gZnVuY3Rpb24gaXNQcmVzZW50KG86IGFueSk6IGJvb2xlYW4ge1xyXG4vLyAgIHJldHVybiBvICE9IG51bGw7XHJcbi8vIH1cclxuLy9cclxuLy8gZnVuY3Rpb24gX2V4ZWN1dGVWYWxpZGF0b3JzKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSk6IGFueVtdIHtcclxuLy8gICByZXR1cm4gdmFsaWRhdG9ycy5tYXAodiA9PiB2KGNvbnRyb2wpKTtcclxuLy8gfVxyXG4vL1xyXG4vLyBmdW5jdGlvbiBfZXhlY3V0ZUFzeW5jVmFsaWRhdG9ycyhjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsIHZhbGlkYXRvcnM6IEFzeW5jVmFsaWRhdG9yRm5bXSk6IGFueVtdIHtcclxuLy8gICByZXR1cm4gdmFsaWRhdG9ycy5tYXAodiA9PiB2KGNvbnRyb2wpKTtcclxuLy8gfVxyXG4vL1xyXG4vLyBmdW5jdGlvbiBfbWVyZ2VFcnJvcnMoYXJyYXlPZkVycm9yczogVmFsaWRhdGlvbkVycm9yc1tdKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4vLyAgIGNvbnN0IGVycm9yczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9XHJcbi8vICAgICBfLnJlZHVjZShhcnJheU9mRXJyb3JzLCAocmVzdWx0OiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCwgZXJyOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCkgPT4ge1xyXG4vLyAgICAgICByZXR1cm4gZXJyID8geyAuLi5yZXN1bHQsIC4uLmVyciB9IDogcmVzdWx0O1xyXG4vLyAgICAgfSwge30pO1xyXG4vL1xyXG4vLyAgIHJldHVybiBPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBlcnJvcnM7XHJcbi8vXHJcbi8vIH1cclxuIl19