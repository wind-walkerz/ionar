{"version":3,"file":"ionar-form.umd.js.map","sources":["ng://@ionar/form/ui/components/select/container/select.component.ts","ng://@ionar/form/ui/components/select/components/control/control.component.ts","ng://@ionar/form/ui/components/select/components/menu/menu.component.ts","ng://@ionar/form/ui/components/select/components/menu/option/option.component.ts","ng://@ionar/form/ui/components/select/select.module.ts","ng://@ionar/form/ui/components/upload/containers/upload.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/click/click.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/drop/drop.component.ts","ng://@ionar/form/ui/components/upload/components/file/file.component.ts","ng://@ionar/form/ui/components/upload/upload.module.ts","ng://@ionar/form/ui/components/input/input.component.ts","ng://@ionar/form/ui/components/input/input.module.ts","ng://@ionar/form/ui/components/checkbox/checkbox.component.ts","ng://@ionar/form/ui/components/checkbox/checkbox.module.ts","ng://@ionar/form/ui/components/textarea/textarea.component.ts","ng://@ionar/form/ui/components/textarea/textarea.module.ts","ng://@ionar/form/ui/components/menu/menu.component.ts","ng://@ionar/form/ui/components/menu/menu.module.ts","ng://@ionar/form/ui/ui.module.ts","node_modules/tslib/tslib.es6.js","ng://@ionar/form/core/directives/dynamic-field.directive.ts","ng://@ionar/form/core/providers/form.service.ts","ng://@ionar/form/core/directives/field-template.directive.ts","ng://@ionar/form/core/core.component.ts","ng://@ionar/form/core/components/control.component.ts","ng://@ionar/form/core/components/field.component.ts","ng://@ionar/form/core/directives/submit.directive.ts","ng://@ionar/form/core/components/label.component.ts","ng://@ionar/form/core/components/feedback.component.ts","ng://@ionar/form/core/core.module.ts","ng://@ionar/form/lib/form.module.ts","ng://@ionar/form/core/models/AbstractControl.ts","ng://@ionar/form/core/models/Validator.ts","ng://@ionar/form/core/models/FormControl.ts","ng://@ionar/form/core/models/FormGroup.ts","ng://@ionar/form/core/providers/form_builder.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Component({\r\n  selector: 'io-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\n\r\nexport class SelectComponent implements OnInit {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  show_menu: Boolean = false;\r\n  selected_option: any = null;\r\n  @Input() options: any = null;\r\n  @Input() value = null;\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Input() invalid: Boolean = false;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  constructor(private eRef: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.value) {\r\n      this.selected_option = _.find(this.options, ['value', this.value.toString()]);\r\n    }\r\n  }\r\n\r\n  ///-----------------------------------------------  General Functions   -----------------------------------------------///\r\n\r\n\r\n  onToggleMenu = () => {\r\n    this.show_menu = !this.show_menu;\r\n  };\r\n\r\n\r\n  onChange = option => {\r\n\r\n    this.options = _.map(this.options, (item: { value: any, label: any, selected: Boolean }) => {\r\n      item.selected = _.isEqual(item, option);\r\n      this.selected_option = item;\r\n      return item;\r\n    });\r\n    this.show_menu = false;\r\n\r\n    this.change.emit(this.selected_option.value);\r\n\r\n  };\r\n\r\n  ///-----------------------------------------------  Host   -----------------------------------------------///\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickout(event) {\r\n    if (!this.eRef.nativeElement.contains(event.target)) {\r\n      this.show_menu = false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Component, ElementRef, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\n\n\n\n@Component({\n  selector: 'control',\n  templateUrl: './control.component.html',\n  styleUrls: ['./control.component.scss'],\n\n})\nexport class ControlComponent implements OnInit {\n  @Input() show_menu = false;\n  @Input() label = null;\n\n  constructor(private eRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.eRef.nativeElement.focus();\n  }\n\n  @HostBinding() tabindex = 0;\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <select-option\n                  [data]=\"option\"\n                  (click)=\"this.onSelectOption.emit(option)\"\n          ></select-option>\n      </ng-container>\n  `,\n  styles: [`\n      :host {\n          background-color: white;\n          border-radius: 5px;\n          box-sizing: border-box;\n          border: 1px solid rgb(196, 202, 212);\n          overflow-y: scroll;\n          padding: 0 10px;\n          position: absolute;\n          top: 100%;\n          z-index: 9999;\n          width: 100%;\n          max-height: 20rem;\n      }\n  `]\n})\nexport class MenuComponent implements OnInit {\n  @Input() options = [];\n  @Output() onSelectOption = new EventEmitter<any>();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { AfterViewInit, Component, HostBinding, HostListener, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'select-option',\n  template: `\n      <p>\n          {{data.label}}\n      </p>`,\n  styleUrls: ['./option.component.scss']\n})\nexport class OptionComponent implements OnInit {\n  @Input() data = null;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.selected = this.data.selected;\n    this.disabled = this.data.disabled;\n  }\n\n\n  @HostBinding('class.selected') selected: Boolean = false;\n  @HostBinding('class.disabled') disabled: Boolean = false;\n\n  @HostListener('click', ['$event.target']) onClick(btn) {\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SelectComponent } from './container/select.component';\r\nimport { ControlComponent } from './components/control/control.component';\r\nimport { MenuComponent } from './components/menu/menu.component';\r\nimport { OptionComponent } from './components/menu/option/option.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SelectComponent,\r\n    ControlComponent,\r\n    MenuComponent,\r\n    OptionComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    SelectComponent\r\n  ],\r\n  entryComponents: [SelectComponent]\r\n})\r\nexport class SelectModule {\r\n}\r\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  TemplateRef, ViewChild\n} from '@angular/core';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'io-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.scss']\n})\nexport class UploadComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  file_list = [];\n  @Output() change = new EventEmitter();\n  @Input() invalid: Boolean = false;\n  @Input() type: string = 'input';\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n  @ViewChild('default') private _defaultTempRef: TemplateRef<any>;\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private elRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    if (!this.template) {\n      this.template = this._defaultTempRef;\n    }\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n  onFileChanged(file_list) {\n    this.file_list = this.file_list.concat(_.map(file_list));\n\n    this.change.emit(this.multiple ? this.file_list : this.file_list[0]);\n\n  }\n\n};\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input, OnChanges,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { el } from '@angular/platform-browser/testing/src/browser_util';\n\n@Component({\n  selector: 'click',\n  templateUrl: './click.component.html',\n  styleUrls: ['./click.component.scss']\n})\nexport class ClickComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Output() change = new EventEmitter();\n\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ngOnChanges(changes): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { Component, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: 'drop',\n  templateUrl: './drop.component.html',\n  styleUrls: ['./drop.component.scss']\n})\nexport class DropComponent implements OnInit {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Output() change = new EventEmitter();\n  @Input() multiple: Boolean = false;\n  @Input() template: TemplateRef<any>;\n\n  @HostBinding('class.drop_hover') drop_hover: Boolean = false;\n\n  @HostListener('drop', ['$event'])\n  onDrop = $event => {\n    event.preventDefault();\n    this.change.emit($event.dataTransfer.files);\n    this.drop_hover = false;\n  };\n\n  @HostListener('dragover', ['$event'])\n  onDragOver = $event => {\n    event.preventDefault();\n    this.drop_hover = true;\n  };\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave = $event => {\n    event.preventDefault();\n    this.drop_hover = false;\n  };\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'file',\n  templateUrl: './file.component.html',\n  styleUrls: ['./file.component.scss']\n})\nexport class FileComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Input() data;\n  image;\n  name = '';\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    const reader: FileReader = new FileReader();\n    reader.readAsDataURL(this.data);\n    reader.onload = () => {\n      this.image = reader.result;\n\n      // need to run CD since file load runs outside of zone\n      this.cd.markForCheck();\n    };\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  };\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UploadComponent } from './containers/upload.component';\r\nimport { ClickComponent } from './components/upload-zone/click/click.component';\r\nimport { DropComponent } from './components/upload-zone/drop/drop.component';\r\nimport { FileComponent } from './components/file/file.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UploadComponent,\r\n    ClickComponent,\r\n    DropComponent,\r\n    FileComponent\r\n  ],\r\n  imports: [CommonModule],\r\n  exports: [UploadComponent],\r\n  entryComponents: [UploadComponent]\r\n})\r\nexport class UploadModule {\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'io-input',\r\n  templateUrl: `./input.component.html`,\r\n  styleUrls: ['./input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.disabled]': 'disabled',\r\n    '[class.readonly]': 'readonly'\r\n  }\r\n})\r\n\r\nexport class InputComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n\r\n  @Input() type = '';\r\n  @Input() name = '';\r\n  @Input() placeholder = '';\r\n  @Input() value: any = null;\r\n\r\n\r\n  @Input() invalid: Boolean = false;\r\n  @Input() disabled: Boolean = false;\r\n  @Input() range = [];\r\n  @Input() readonly: Boolean = false;\r\n\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Output() enter = new EventEmitter();\r\n\r\n  @Input() template: TemplateRef<any>;\r\n\r\n  @HostBinding('class.focus') host_focus: Boolean = false;\r\n  @HostBinding('class.invalid') host_invalid: Boolean = false;\r\n\r\n\r\n  templateContext;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.templateContext = {\r\n      props: {\r\n        value: this.value,\r\n        type: this.type,\r\n        name: this.name,\r\n        placeholder: this.placeholder,\r\n        invalid: this.invalid,\r\n        disabled: this.disabled,\r\n        range: this.range,\r\n        readonly: this.readonly\r\n      },\r\n      events: {\r\n        change: this.change,\r\n        blur: this.blur,\r\n        enter: this.enter,\r\n        keydown: this.onKeyDown,\r\n        keypress: this.onKeyPress,\r\n        paste: this.onPaste\r\n      }\r\n    };\r\n\r\n    this.host_invalid = this.invalid;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.host_invalid = this.invalid;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onFocus = () => {\r\n    this.host_focus = true;\r\n  };\r\n\r\n  onBlur = () => {\r\n    this.blur.emit();\r\n    this.host_focus = false;\r\n    this.cd.markForCheck();\r\n  };\r\n\r\n  onChange = _.debounce(e => {\r\n    e.stopPropagation();\r\n    console.log(e.target.value);\r\n    let value = e.target.value;\r\n    const min = parseInt(this.range[0], 10);\r\n    const max = parseInt(this.range[1], 10);\r\n    if (this.range && this.type === 'number' && !(min <= value && value <= max)) {\r\n      value = e.target.value = this.range[1];\r\n    }\r\n\r\n    this.change.emit(value);\r\n\r\n  }, 500);\r\n\r\n  //  Keyboard & Clipboard Event  //\r\n\r\n  onKeyPress = (e: KeyboardEvent) => {\r\n    if (e.keyCode === 13) this.enter.emit();\r\n  };\r\n\r\n  onKeyDown = (e: KeyboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberKeyDown(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhoneKeyDown(e)\r\n        : null;\r\n  };\r\n\r\n  onPaste = (e: ClipboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberPaste(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhonePaste(e)\r\n        : null;\r\n  };\r\n\r\n\r\n  // Ensure that it is a number from [0-9] no decimal_point\r\n\r\n  onPhoneKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a number or string of number\r\n  onPhonePaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n  // Ensure that it is a  number: integer || decimal\r\n  onNumberKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      e.keyCode === 188 ||    // comma(\",\")\r\n      e.keyCode === 110 ||        //   numpad decimal point\r\n      e.keyCode === 190 ||        // period(\".\")\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a string of number: integer || decimal\r\n  onNumberPaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d.+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputComponent } from './input.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    InputComponent\r\n  ],\r\n  entryComponents: [InputComponent]\r\n})\r\nexport class InputModule {\r\n}\r\n","import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'io-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n\n  @Input() label: string;\n  @Input() title: any = '';\n  @Input() value: Boolean = false;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  @HostListener('click')\n  onClick = () => {\n    this.value = !this.value;\n    this.change.emit(this.value);\n  };\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CheckboxComponent } from './checkbox.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CheckboxComponent\r\n  ],\r\n  exports: [\r\n    CheckboxComponent\r\n  ],\r\n  entryComponents: [CheckboxComponent]\r\n})\r\nexport class CheckboxModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-textarea',\n  template: `\n      <textarea\n              [name]=\"name\"\n              [value]=\"value\"\n              [class.invalid]=\"invalid\"\n              cols=\"1\" rows=\"1\"\n              [placeholder]=\"placeholder\"\n              \n              (change)=\"$event.stopPropagation(); change.emit($event.target.value);\"\n              (blur)=\"blur.emit()\"\n      ></textarea>\n  `,\n  styles: [`\n      :host {\n          display: flex;\n          flex: 1;\n      }\n\n      textarea {\n          border: none;\n          font-size: 1.5rem;\n          padding: 1rem;\n          width: 100%;\n          max-width: 100%;\n          overflow-y: scroll;\n      }\n  `]\n})\nexport class TextareaComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Input() name: string = '';\n  @Input() value: any = '';\n  @Input() placeholder: any = '';\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  }\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { NgModule } from '@angular/core';\r\nimport {TextareaComponent } from './textarea.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextareaComponent\r\n  ],\r\n  exports: [TextareaComponent],\r\n  entryComponents: [TextareaComponent]\r\n})\r\nexport class TextareaModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <div\n                  class=\"option\"\n                  [class.active]=\"option.value === value\"\n                  (click)=\"onSelectOption(option)\"\n          >\n              {{option.label}}\n          </div>\n      </ng-container>\n  `,\n  styleUrls: [`./menu.component.scss`]\n})\nexport class MenuComponent implements OnInit, OnChanges {\n  @Input() options: ({ label: any, value: any, disable?: boolean })[] = [];\n  @Input() name = '';\n  @Input() value: any = null;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Output() enter = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n  onSelectOption = option => {\n    this.change.emit(option.value);\n    this.blur.emit();\n  };\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenuComponent } from './menu.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MenuComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    MenuComponent\r\n  ],\r\n  entryComponents: [MenuComponent]\r\n})\r\nexport class MenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SelectModule } from './components/select/select.module';\r\nimport { UploadModule } from './components/upload/upload.module';\r\n\r\nimport { InputModule } from './components/input/input.module';\r\nimport { CheckboxModule } from './components/checkbox/checkbox.module';\r\nimport { TextareaModule } from './components/textarea/textarea.module';\r\nimport { MenuModule } from './components/menu/menu.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n  exports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n\r\n})\r\nexport class UIModule {\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport _ from 'lodash';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { InputComponent, MenuComponent, TextareaComponent, UploadComponent } from '../../ui';\r\n\r\n\r\n@Directive({\r\n  selector: '[dynamic_field]'\r\n})\r\nexport class DynamicFieldDirective implements OnInit, OnDestroy, OnChanges {\r\n  @Input('readonly') private _readonly: Boolean;\r\n  @Input('controlConfig') private _controlConfig: ControlConfig;\r\n  @Input('events') private _events: { [key: string]: Function };\r\n\r\n  @Input('invalid') private _invalid: Boolean;\r\n  @Input('value') private _value: any;\r\n  @Input('options') private _options: any;\r\n\r\n  @Input('template') private _template: Boolean;\r\n\r\n  private _compRef: ComponentRef<any>;\r\n\r\n  components = {\r\n    input: InputComponent,\r\n    textarea: TextareaComponent,\r\n    // select: AuroraSelectComponent,\r\n    // datepicker: AuroraDatePickerComponent,\r\n    // checkbox: AuroraCheckboxComponent,\r\n    upload: UploadComponent,\r\n    menu: MenuComponent\r\n    // radio: AuroraRadioComponent\r\n  };\r\n\r\n  constructor(\r\n    private _resolver: ComponentFactoryResolver,\r\n    private _vcRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createComponent();\r\n  }\r\n\r\n  ngOnChanges() {\r\n\r\n    if (this._compRef) {\r\n      this.updateContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._compRef) this._compRef.destroy();\r\n  }\r\n\r\n  createComponent = () => {\r\n    const component = this.components[this._controlConfig.type];\r\n    const factory = this._resolver.resolveComponentFactory<any>(component);\r\n    this._compRef = this._vcRef.createComponent(factory);\r\n    this.initContext();\r\n  };\r\n\r\n  private initContext = () => {\r\n    this.parseContext();\r\n  };\r\n\r\n  private updateContext = () => {\r\n    this.parseContext('updated');\r\n    if (typeof this._compRef.instance.ngOnChanges === 'function') {\r\n      this._compRef.instance.ngOnChanges();\r\n    } else {\r\n      throw new Error(`${this._compRef.componentType.name} doesn't implement 'ngOnChanges'`);\r\n    }\r\n\r\n  };\r\n\r\n  private parseContext = (status = 'initial') => {\r\n    const context = {\r\n      name: this._controlConfig.name,\r\n      invalid: this._invalid,\r\n      ...this._controlConfig.props,\r\n      value: this._value,\r\n      options: this._options,\r\n      readonly: this._readonly,\r\n      template: this._template\r\n    };\r\n\r\n    _.forOwn(context, (value, key) => {\r\n      if (value !== undefined) this._compRef.instance[key] = value;\r\n    });\r\n\r\n    if (status === 'initial') {\r\n      _.forOwn(this._events, (value, key) => {\r\n\r\n        if (!this._compRef.instance[key])\r\n          this._compRef.instance[key] = new EventEmitter();\r\n\r\n        this._compRef.instance[key].pipe(untilDestroyed(this)).subscribe(event => {\r\n          (value instanceof EventEmitter)\r\n            ? value.emit(event)\r\n            : value(event);\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n  };\r\n}\r\n","import { AfterViewInit, Injectable, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { AbstractControl } from '../models/AbstractControl';\r\nimport { ValidationConfigs } from '../models/Validator';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Injectable()\r\n\r\nexport class FormService implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  private formGroup: FormGroup;\r\n\r\n  $initialize = new Subject()\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  initialize = (formGroup: FormGroup) => {\r\n    this.formGroup = formGroup;\r\n    this.$initialize.next(formGroup)\r\n  };\r\n\r\n\r\n  getFormGroup = (): FormGroup => this.formGroup;\r\n  getControl = (name): AbstractControl => this.formGroup.get(name);\r\n\r\n  convertToFormData = data => {\r\n    const form = new FormData();\r\n\r\n    _.forOwn(data, (value, key) => {\r\n      if (_.isArray(value)) {\r\n        _.each(value, file => form.append(`${key}[]`, file, file.name));\r\n      } else form.append(key, value);\r\n\r\n    });\r\n\r\n    return form;\r\n  };\r\n\r\n  convertToMediaType = (value, media_type) => {\r\n\r\n    if (media_type) {\r\n      switch (media_type.toLowerCase()) {\r\n        case 'json':\r\n          return JSON.stringify(value);\r\n        case 'form-data':\r\n          return this.convertToFormData(value);\r\n        default:\r\n          return value;\r\n      }\r\n    }\r\n    return value;\r\n  };\r\n\r\n}\r\n\r\n\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component, Directive, Input,\r\n  OnInit, TemplateRef, ViewContainerRef\r\n} from '@angular/core';\r\n\r\n\r\n@Directive({\r\n  selector: '[fieldTemplate]'\r\n})\r\nexport class FieldTemplateDirective implements OnInit, AfterViewInit {\r\n\r\n  @Input() name: any = '';\r\n\r\n  constructor(\r\n    private _vcRef: ViewContainerRef,\r\n    private _tplRef: TemplateRef<any>\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._vcRef.clear();\r\n  }\r\n}\r\n","import {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges, ViewChild\r\n} from '@angular/core';\r\nimport { FormService } from './providers/form.service';\r\n\r\nimport { FormGroup } from './models/FormGroup';\r\nimport { FormControl } from './models/FormControl';\r\nimport { ControlComponent } from './components/control.component';\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@Component({\r\n  selector: 'io-form',\r\n  template: `\r\n      <ng-container>\r\n          <ng-template #contentVc>\r\n              <ng-content></ng-content>\r\n          </ng-template>\r\n\r\n          <ng-container *ngIf=\"viewInitialized\">\r\n\r\n              <ng-container *ngIf=\"!default_template\">\r\n                  <ng-container [ngTemplateOutlet]=\"contentVc\"></ng-container>\r\n              </ng-container>\r\n\r\n              <ng-container *ngIf=\"default_template\">\r\n                  <ng-container *ngFor=\"let name of controlRoster\">\r\n                      <form-control\r\n                              [name]=\"name\"\r\n                              [formGroup]=\"formGroup\"\r\n                      >\r\n                      </form-control>\r\n                  </ng-container>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n\r\n      </ng-container>\r\n\r\n\r\n\r\n  `,\r\n  styles: [`\r\n\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [FormService]\r\n})\r\n\r\nexport  class FormComponent implements AfterViewChecked, OnDestroy {\r\n\r\n  @Input() formGroup: FormGroup;\r\n\r\n  @Input() mediaType: String;\r\n  @Output() submit = new EventEmitter();\r\n\r\n  @ViewChild('contentVc', { read: ElementRef }) protected _contentVcRef;\r\n\r\n  @ContentChildren(FieldTemplateDirective) _fieldTemplateDirList;\r\n\r\n  controlRoster: string[];\r\n\r\n  controls: FormControl[];\r\n\r\n  default_template: Boolean;\r\n\r\n  viewInitialized: Boolean = false;\r\n\r\n  protected _subscription: Subscription;\r\n\r\n  constructor(protected _formSvs: FormService, protected cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n\r\n    if (this.formGroup) {\r\n\r\n      this.parseContext();\r\n      this.viewInitialized = true;\r\n      this.cd.detectChanges();\r\n      if (!this.default_template) {\r\n        this.default_template = this._contentVcRef.nativeElement.parentElement.children.length === 0;\r\n      }\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n\r\n  parseContext = () => {\r\n    this._formSvs.initialize(this.formGroup);\r\n    this.controlRoster = _.keys(this.formGroup.controls);\r\n\r\n    this.controls = _.values(this.formGroup.controls);\r\n\r\n    if (this._subscription) this._subscription.unsubscribe();\r\n\r\n    this._subscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this), distinctUntilChanged()).subscribe((data: { value: any, instant: boolean }) => {\r\n\r\n      if (this.formGroup.valid || data.instant) {\r\n\r\n        this.submit.emit(this._formSvs.convertToMediaType(data.value, this.mediaType));\r\n      }\r\n\r\n\r\n    });\r\n  };\r\n\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { FormComponent } from '../core.component';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FieldTemplateDirective } from '../directives/field-template.directive';\r\n\r\n@Component({\r\n  selector: 'form-control',\r\n  template: `\r\n\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <form-label *ngIf=\"show_label\"></form-label>\r\n\r\n          <form-field></form-field>\r\n\r\n          <form-feedback *ngIf=\"show_feedback\"></form-feedback>\r\n      </ng-container>\r\n\r\n  `,\r\n\r\n  styles: [`\r\n      :host {\r\n          display: grid;\r\n          grid-template-areas: \"label   field\" \". feedback\";\r\n          grid-template-columns: 3fr 7fr;\r\n          grid-template-rows: 1fr auto;\r\n          margin-bottom: 1rem;\r\n          height: auto;\r\n          visibility: visible;\r\n          z-index: 50;\r\n      }\r\n\r\n      :host-context(.hide-label) {\r\n          grid-template-areas: \"field\" \"feedback\";\r\n          grid-template-columns: 1fr;\r\n      }\r\n\r\n      :host-context(.hide-feedback) {\r\n          grid-template-areas: \"label   field\";\r\n          grid-template-columns: 3fr 7fr;\r\n      }\r\n\r\n      :host-context(.hide-label.hide-feedback) {\r\n          grid-template-areas: \"field\";\r\n      }\r\n\r\n      :host-context(.hidden) {\r\n          display: none !important;\r\n      }\r\n\r\n      form-label {\r\n          grid-area: label;\r\n      }\r\n\r\n      form-field {\r\n          grid-area: field;\r\n      }\r\n\r\n      form-feedback {\r\n          grid-area: feedback;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ControlComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  @Input() name: any = '';\r\n\r\n  @Input() formGroup: FormGroup;\r\n  _control: FormControl;\r\n\r\n  fieldTemplate: TemplateRef<any>;\r\n\r\n  show_feedback: Boolean = true;\r\n\r\n  show_label: Boolean = true;\r\n\r\n  @ContentChild(FieldTemplateDirective) private _fieldTemplateDir;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    public cd: ChangeDetectorRef,\r\n    private _renderer: Renderer2,\r\n    private _elRef: ElementRef,\r\n    @Host() private _parent: FormComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this._checkTemplate();\r\n\r\n    this._control = this.formGroup.get(this.name);\r\n\r\n\r\n    this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.name);\r\n\r\n    const props = (<ControlConfig>this._control.configuration).props;\r\n    if (_.has(props, ['hidden'])) {\r\n\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hidden');\r\n    }\r\n\r\n    if (_.has(props, ['hideLabel'])) {\r\n      this.show_label = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-label');\r\n    }\r\n\r\n\r\n    if (_.has(props, ['hideFeedback'])) {\r\n      this.show_feedback = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-feedback');\r\n    }\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n\r\n  private _checkTemplate = () => {\r\n\r\n    const templateData = this._fieldTemplateDir ? this._fieldTemplateDir : _.find(this._parent._fieldTemplateDirList.toArray(), ['name', this.name]);\r\n\r\n    if (templateData) {\r\n\r\n      this.fieldTemplate = templateData._tplRef;\r\n    }\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges, TemplateRef\r\n} from '@angular/core';\r\n\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { untilDestroyed } from '@ionar/utility';\r\n\r\n\r\n@Component({\r\n  selector: 'form-field',\r\n  template: `\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <ng-container\r\n                  dynamic_field\r\n                  [controlConfig]=\"controlConfig\"\r\n\r\n                  [events]=\"{\r\n                            change: onChanged,\r\n                            blur: onTouched,\r\n                            enter: onEntered\r\n                    }\"\r\n                  [template]=\"template\"\r\n\r\n                  [value]=\"control.value\"\r\n                  [options]=\"controlConfig.options\"\r\n                  [invalid]=\"invalid\"\r\n                  [readonly]=\"formGroup.readonly\"\r\n          >\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          width: 100%;\r\n          height: 100%;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FieldComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  formGroup: FormGroup;\r\n  control: FormControl;\r\n  controlConfig: ControlConfig;\r\n\r\n  invalid: Boolean = false;\r\n  template: TemplateRef<any>\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.parseContext();\r\n    //\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onChanged = e => {\r\n    this._formSvs.getControl(this._parent.name).setValue(e);\r\n  };\r\n\r\n  onTouched = () => {\r\n    this._formSvs.getControl(this._parent.name).markAsTouched();\r\n  };\r\n\r\n  onEntered = () => {\r\n    // this.formSvs._onEntered()\r\n    // if (this.name === 'password') this.focus = true;\r\n  };\r\n\r\n  parseContext = () => {\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.template = this._parent.fieldTemplate\r\n    this.invalid = this.control.invalid && (this.control.dirty || this.control.touched || this.formGroup.submitted);\r\n    this.cd.detectChanges();\r\n\r\n  };\r\n\r\n}\r\n","import { Directive, ElementRef, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '../models/FormGroup';\n\n@Directive({\n  selector: '[submitForm]'\n})\nexport class SubmitDirective implements OnInit, OnDestroy, OnChanges {\n\n  @Input('submitForm') private _formGr: FormGroup;\n  @Input() disabled: Boolean = false;\n\n  @HostListener('click', ['$event'])\n  onClick = (e: MouseEvent) => {\n\n    if (!this.disabled) {\n\n      this._formGr.submit();\n    }\n\n  };\n\n  constructor(private _elRef: ElementRef) {\n\n  }\n\n\n  ngOnInit(): void {\n    // console.log(this._formGr)\n  }\n\n  ngOnChanges() {\n    // console.log(this._formGr)\n  }\n\n  ngOnDestroy() {\n\n  }\n\n\n}\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\nimport { ControlComponent } from './control.component';\r\n\r\n\r\n@Component({\r\n  selector: 'form-label',\r\n  template: `\r\n      {{label}}\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          align-items: center;\r\n          color: rgba(0, 0, 0, 0.85);\r\n          font-size: 1.6rem;\r\n          font-weight: 700;\r\n          position: relative\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LabelComponent implements OnInit, AfterViewChecked, OnDestroy {\r\n  formGroup: FormGroup;\r\n  controlConfig: ControlConfig;\r\n  control: FormControl;\r\n\r\n  label: any;\r\n\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.label = this.controlConfig.label || _.startCase(this._parent.name);\r\n\r\n    this.cd.detectChanges();\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'form-feedback',\r\n  template: `\r\n      <ng-container *ngIf=\"show_feedback\">\r\n          <ng-container *ngIf=\"invalid\">\r\n              <ng-container *ngFor=\"let err of error_list\">\r\n                  <div class=\"feedback\">{{err}}</div>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  //language=SCSS\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: flex-start;\r\n          width: 100%;\r\n          color: #f5222d;\r\n          font-size: 1.2rem;\r\n          margin-top: 0.5rem;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeedbackComponent implements OnInit, OnChanges, AfterViewChecked, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  _control: FormControl;\r\n  formGroup: FormGroup;\r\n\r\n  invalid: Boolean = false;\r\n  error_list: string[] | null;\r\n  show_feedback: Boolean = true;\r\n\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n\r\n  generate_feedback = (validator, value) => {\r\n\r\n    // const feedback = this._control.validateOptions.feedback\r\n\r\n    const feedback = {};\r\n\r\n    // console.log(_.values(this._control.configuration.validators))\r\n\r\n\r\n    // _.mapValues(this._control.configuration.validators, (value: any) => {\r\n    //   feedback[validator] = _.isString(value) ? value : value.message || null;\r\n    // });\r\n\r\n\r\n    if (!validator) return null;\r\n\r\n    switch (validator) {\r\n      case 'required':\r\n        if (this._parent.name === 'confirm_password') {\r\n          return feedback['required'] || `You need to confirm password`;\r\n        }\r\n        return feedback['required'] || `${_.startCase(this._parent.name)}  is required`;\r\n      case 'agreement':\r\n        return feedback['agreement'] || `You must agree to the terms and conditions before continuing!`;\r\n      case 'email' :\r\n        return feedback['email'] || `Invalid email address. Valid e-mail can contain only latin letters, numbers, '@' and '.'`;\r\n      case 'email_existed':\r\n        return feedback['email_existed'] || `${_.startCase(this._parent.name)} is existed! Please use another one`;\r\n\r\n      case 'stringLength' :\r\n\r\n        return value.minLength ? `${_.startCase(this._parent.name)} cannot be shorter than ${value.minLength}` : `${_.startCase(this._parent.name)} cannot be longer than ${value.maxLength}`;\r\n\r\n      case 'equalTo' :\r\n\r\n        return `Confirm password is not equal to password`;\r\n\r\n      default:\r\n        return value;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  ngOnChanges(changes): void {\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  parseContext = () => {\r\n    this._control = this.formGroup.get(this._parent.name);\r\n    this.invalid = this._control.invalid && (this._control.dirty || this._control.touched || this.formGroup.submitted);\r\n    this.error_list = _.map(this._control.errors, (value, key) => this.generate_feedback(key, value));\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DynamicFieldDirective } from './directives/dynamic-field.directive';\r\n\r\nimport { FieldComponent } from './components/field.component';\r\n\r\nimport { SubmitDirective } from './directives/submit.directive';\r\n\r\n\r\nimport { ControlComponent } from './components/control.component';\r\nimport { LabelComponent } from './components/label.component';\r\nimport { FeedbackComponent } from './components/feedback.component';\r\nimport { FormComponent } from './core.component';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent,\r\n    FieldComponent, ControlComponent, LabelComponent, FeedbackComponent, FieldTemplateDirective,\r\n    DynamicFieldDirective, SubmitDirective\r\n  ],\r\n\r\n  imports: [CommonModule],\r\n  exports: [\r\n    FormComponent,\r\n    FieldComponent,\r\n    SubmitDirective,\r\n    ControlComponent,\r\n    LabelComponent, FeedbackComponent, FieldTemplateDirective\r\n  ]\r\n})\r\nexport class CoreModule {\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIModule } from '../ui/ui.module';\nimport { CoreModule } from '../core/core.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CoreModule,\n    UIModule\n  ],\n  exports: [\n    CoreModule,\n    UIModule\n  ]\n})\nexport class IonarFormModule {\n}\n","import { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nimport { ValidationErrors, ValidatorFn } from './Validator';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * This is the base class for `FormControl`, `FormGroup.ts`, and `FormArray`.\r\n *\r\n * It provides some of the shared behavior that all controls and groups of controls have, like\r\n * running validators, calculating status, and resetting state. It also defines the properties\r\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\r\n * instantiated directly.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nexport abstract class AbstractControl {\r\n\r\n  public readonly configuration: ControlConfig | FormConfigs;\r\n\r\n  /** @internal */\r\n  public readonly pendingValue: any;\r\n\r\n  /**\r\n   * The current value of the control.\r\n   *\r\n   * * For a `FormControl`, the current value.\r\n   * * For a `FormGroup`, the values of enabled controls as an object with a key-value pair for each member of the group.\r\n   * * For a `FormArray`, the values of enabled controls as an array.\r\n   *\r\n   */\r\n  public readonly value: any;\r\n\r\n  /**\r\n   * An object containing any errors generated by failing validation,\r\n   * or null if there are no errors.\r\n   */\r\n\r\n  public readonly errors: ValidationErrors | null;\r\n\r\n  /**\r\n   * True if the control is marked as `touched`.\r\n   *\r\n   * A control is marked `touched` once the user has triggered\r\n   * a `blur` event on it.\r\n   */\r\n  public readonly touched: boolean = false;\r\n\r\n  /**\r\n   * A control is `pristine` if the user has not yet changed the value in the UI.\r\n   *\r\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  public readonly pristine: boolean = true;\r\n\r\n  /**\r\n   * The validation status of the control. There are four possible\r\n   * validation status values:\r\n   *\r\n   * * **VALID**: This control has passed all validation checks.\r\n   * * **INVALID**: This control has failed at least one validation check.\r\n   * * **PENDING**: This control is in the midst of conducting a validation check.\r\n   * * **DISABLED**: This control is exempt from validation checks.\r\n   *\r\n   * These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.\r\n   */\r\n  public readonly status: string;\r\n\r\n  public readonly validator: ValidatorFn | null;\r\n\r\n  public readonly asyncValidator: ValidatorFn | null;\r\n\r\n  public _asyncValidationSubscription: any;\r\n\r\n  private _parent: FormGroup;\r\n\r\n  /**\r\n   * @description\r\n   * Emits an event when the form submission has been triggered.\r\n   */\r\n\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the value of the control changes, in\r\n   * the UI or programmatically.\r\n   */\r\n  public readonly valueChanges: Observable<any>;\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the validation `status` of the control\r\n   * recalculates.\r\n   */\r\n  public readonly statusChanges: Observable<any>;\r\n\r\n\r\n  /**\r\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has any status other than 'DISABLED',\r\n   * false if the status is 'DISABLED'.\r\n   *\r\n   */\r\n  get enabled(): boolean {\r\n    return this.status !== DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `disabled` when its `status` is `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * Disabled controls are exempt from validation checks and\r\n   * are not included in the aggregate value of their ancestor\r\n   * controls.\r\n   *\r\n   * @returns True if the control is disabled, false otherwise.\r\n   */\r\n  get disabled(): boolean {\r\n    return this.status === DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `valid` when its `status` is `VALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has passed all of its validation tests,\r\n   * false otherwise.\r\n   */\r\n  get valid(): boolean {\r\n    return this.status === VALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `invalid` when its `status` is `INVALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control has failed one or more of its validation checks,\r\n   * false otherwise.\r\n   */\r\n  get invalid(): boolean {\r\n    return this.status === INVALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `pending` when its `status` is `PENDING`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control is in the process of conducting a validation check,\r\n   * false otherwise.\r\n   */\r\n  get pending(): boolean {\r\n    return this.status === PENDING;\r\n  }\r\n\r\n  /**\r\n   * A control is `dirty` if the user has changed the value\r\n   * in the UI.\r\n   *\r\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  get dirty(): boolean {\r\n    return !this.pristine;\r\n  }\r\n\r\n\r\n  /**\r\n   * The parent control.\r\n   */\r\n  get parent(): FormGroup {\r\n    return this._parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the control as `touched`. A control is touched by focus and\r\n   * blur events that do not change the value; compare `markAsDirty`;\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsTouched(): void {\r\n    (this as { touched: boolean }).touched = true;\r\n\r\n    this.updateValueAndValidity({ onlySelf: true });\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `untouched`.\r\n   *\r\n   * If the control has any children, also marks all children as `untouched`\r\n   * and recalculates the `touched` status of all parent controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after the marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsUntouched(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { touched: boolean }).touched = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `dirty`. A control becomes dirty when\r\n   * the control's value is changed through the UI; compare `markAsTouched`.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsDirty(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `pristine`.\r\n   *\r\n   * If the control has any children, marks all children as `pristine`,\r\n   * and recalculates the `pristine` status of all parent\r\n   * controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control emits events after\r\n   * marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false..\r\n   */\r\n  markAsPristine(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = true;\r\n  }\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  /**\r\n   * @param parent Sets the parent of the control\r\n   */\r\n  setParent(parent: FormGroup): void {\r\n    this._parent = parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Recalculates the value and validation status of the control.\r\n   *\r\n   * By default, it also updates the value and validity of its ancestors.\r\n   *\r\n   * @param opts Configuration options determine how the control propagates changes and emits events\r\n   * after updates and validity checks are applied.\r\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\r\n   * update all direct ancestors. Default is false..\r\n   * * `emitEvent`: When true or not supplied (the default), emit the `valueChanges` event\r\n   * observables emit events with the latest status and value when the control is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  updateValueAndValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._setInitialStatus();\r\n    this._updateValue();\r\n    if (this.enabled) {\r\n      this._updateValidity(opts);\r\n\r\n    }\r\n\r\n\r\n    if (opts.emitEvent !== false) {\r\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\r\n      (this.statusChanges as EventEmitter<any>).emit(this.status);\r\n    }\r\n\r\n    if (this._parent && !opts.onlySelf) {\r\n      this._parent.updateValueAndValidity(opts);\r\n    }\r\n\r\n  }\r\n\r\n  storeConfig = (config: ControlConfig | FormConfigs) => {\r\n    (this as { configuration: ControlConfig | FormConfigs }).configuration = config;\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n  }\r\n\r\n\r\n  private _setInitialStatus() {\r\n    (this as { status: string }).status = this._allControlsDisabled() ? DISABLED : VALID;\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateControlsErrors(emitEvent: boolean): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (emitEvent) {\r\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\r\n    }\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  abstract _calculateStatus(): string\r\n\r\n\r\n  /**\r\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract setValue(value: any, options?: Object): void;\r\n\r\n  /**\r\n   * Resets the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract reset(value?: any, options?: Object): void;\r\n\r\n  /**\r\n   * Clear the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract clear(options?: Object): void;\r\n\r\n  /** @internal */\r\n  abstract _allControlsDisabled(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const VALID = 'VALID';\r\n\r\n/**\r\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const INVALID = 'INVALID';\r\n\r\n/**\r\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\r\n * errors are not yet available for the input value.\r\n *\r\n * @see `markAsPending`\r\n * @see `status`\r\n */\r\nexport const PENDING = 'PENDING';\r\n\r\n/**\r\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\r\n * calculations of validity or value.\r\n *\r\n * @see `markAsDisabled`\r\n * @see `status`\r\n */\r\nexport const DISABLED = 'DISABLED';\r\n\r\nexport type FormHooks = 'change' | 'blur' | 'submit';\r\n","import { FormControl } from './FormControl';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport _ from 'lodash';\r\nimport { Form } from '@angular/forms';\r\nimport { map } from 'rxjs/operators';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nexport interface ValidationErrors {\r\n  [key: string]: any\r\n}\r\n\r\nexport interface ValidationConfigs {\r\n  required?: true | String,\r\n  email?: true | String,\r\n  stringLength?: {\r\n    min?: number,\r\n    max?: number,\r\n    message?: string\r\n  },\r\n\r\n  equalTo?: { compare?: string, message?: string } | string,\r\n\r\n  [name: string]: ValidatorType\r\n}\r\n\r\n\r\nexport type ValidatorType = { message?: any, [name: string]: any }\r\n  | string\r\n  | true\r\n  | ValidatorFn\r\n  | AsyncValidatorFn\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ValidatorFn {\r\n  (control: FormControl): ValidationErrors | null\r\n}\r\n\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface AsyncValidatorFn {\r\n  (control: FormControl): Observable<ValidationErrors | null>;\r\n}\r\n\r\n/**\r\n * @description\r\n * Provides a set of built-in validators that can be used by form controls.\r\n *\r\n * A validator is a function that processes a `FormControl` or collection of\r\n * controls and returns an error map or null. A null map means that validation has passed.\r\n * @publicApi\r\n */\r\n// @dynamic\r\nexport class Validators {\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control have a non-empty value.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field is non-empty\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('', Validators.required);\r\n   *\r\n   * console.log(control.errors); // {required: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `required` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static required = (c: FormControl): ValidationErrors | null =>\r\n    isEmptyInputValue(c.value) ? { 'required': true } : null;\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value pass an email validation test.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field matches a valid email pattern\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('bad@', Validators.email);\r\n   *\r\n   * console.log(control.errors); // {email: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `email` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static email = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the length of the control's value to be greater than or equal\r\n   * to the provided minimum length. This validator is also provided by default if you use the\r\n   * the HTML5 `minlength` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field has a minimum of 3 characters\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('ng', Validators.minLength(3));\r\n   *\r\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input minlength=\"5\">\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `minlength` if the validation check fails, otherwise `null`.\r\n   */\r\n  static stringLength = (control: FormControl): ValidationErrors | null => {\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    if (controlConfig.type !== ('input' || 'textarea')) {\r\n      throw new Error(`'stringLength' validator can only be used with control type 'input' or 'textarea'`);\r\n    }\r\n\r\n    const\r\n      min: number = controlConfig.validators['stringLength'].min,\r\n      max: number = controlConfig.validators['stringLength'].max,\r\n      length: number = control.value ? control.value.length : 0;\r\n\r\n    if (length < min) {\r\n      return {\r\n        'stringLength': {\r\n          'minLength': min,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    if (length > max) {\r\n      return {\r\n        'stringLength': {\r\n          'maxLength': max,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n\r\n  static equalTo = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    const compareWith = _.isString(controlConfig.validators['equalTo']) ? controlConfig.validators['equalTo'] : controlConfig.validators['equalTo'].compare;\r\n\r\n    const compared_control = control.parent.controls[compareWith];\r\n\r\n    return (JSON.stringify(control.value) === JSON.stringify(compared_control.value))\r\n      ? null : { equalTo: controlConfig.validators['equalTo'] };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static compose = (validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null => {\r\n    if (!validators) return null;\r\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\r\n    if (presentValidators.length === 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      return _mergeErrors(_executeValidators(control, presentValidators));\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple async validators into a single function that returns the union\r\n   * of the individual error objects for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static composeAsync(asyncValidators: AsyncValidatorFn[]): AsyncValidatorFn | null {\r\n    if (!asyncValidators) return null;\r\n    const presentValidators: AsyncValidatorFn[] = asyncValidators.filter(isPresent) as any;\r\n    if (presentValidators.length == 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      const observables = _executeAsyncValidators(control, presentValidators);\r\n\r\n      return forkJoin(observables).pipe(\r\n        map(_mergeErrors)\r\n      );\r\n\r\n    };\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _isBoxedValue(validator_configs: { [key: string]: any } | true | ValidatorFn | AsyncValidatorFn): boolean {\r\n    return _.isPlainObject(validator_configs);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nconst EMAIL_REGEXP =\r\n  /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n\r\n\r\nfunction isEmptyInputValue(value: any): boolean {\r\n  // we don't check for string here so it also works with arrays\r\n  return value == null || value.length === 0;\r\n}\r\n\r\nfunction isPresent(o: any): boolean {\r\n  return o != null;\r\n}\r\n\r\nfunction _executeValidators(control: FormControl, validators: ValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _executeAsyncValidators(control: FormControl, validators: AsyncValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors | null {\r\n  const errors: { [key: string]: any } =\r\n    _.reduce(arrayOfErrors, (result: ValidationErrors | null, err: ValidationErrors | null) => {\r\n      return err ? { ...result, ...err } : result;\r\n    }, {});\r\n\r\n  return Object.keys(errors).length === 0 ? null : errors;\r\n\r\n}\r\n","import { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\nimport { AsyncValidatorFn, ValidationConfigs, ValidationErrors, ValidatorFn, Validators } from './Validator';\r\nimport _ from 'lodash';\r\nimport { FormGroup } from '../models/FormGroup';\r\n\r\n\r\n/**\r\n * Tracks the value and validation status of an individual form control.\r\n *\r\n * This is one of the three fundamental building blocks of Angular forms, along with\r\n * `FormGroup.ts` and `FormArray`. It extends the `IonarAbstractControl` class that\r\n * implements most of the base functionality for accessing the value, validation status,\r\n * user interactions and events.\r\n *\r\n * @see `IonarAbstractControl`\r\n * @see [Reactive Forms Guide](guide/reactive-forms)\r\n * @see [Usage Notes](#usage-notes)\r\n *\r\n * @usageNotes\r\n *\r\n * ### Initializing Form Controls\r\n *\r\n * Instantiate a `FormControl`, with an initial value.\r\n *\r\n * ```ts\r\n * const control = new FormControl('some value');\r\n * console.log(control.value);     // 'some value'\r\n *```\r\n *\r\n * The following example initializes the control with a form state object. The `value`\r\n * and `disabled` keys are required in this case.\r\n *\r\n * ```ts\r\n * const control = new FormControl({ value: 'n/a', disabled: true });\r\n * console.log(control.value);     // 'n/a'\r\n * console.log(control.status);    // 'DISABLED'\r\n * ```\r\n *\r\n * The following example initializes the control with a sync validator.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', Validators.required);\r\n * console.log(control.value);      // ''\r\n * console.log(control.status);     // 'INVALID'\r\n * ```\r\n *\r\n * The following example initializes the control using an options object.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', {\r\n *    validators: Validators.required,\r\n *    asyncValidators: myAsyncValidator\r\n * });\r\n * ```\r\n *\r\n * ### Configure the control to update on a blur event\r\n *\r\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'blur' });\r\n * ```\r\n *\r\n * ### Configure the control to update on a submit event\r\n *\r\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'submit' });\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value\r\n *\r\n * You reset to a specific form state by passing through a standalone\r\n * value or a form state object that contains both a value and a disabled state\r\n * (these are the only two properties that cannot be calculated).\r\n *\r\n * ```ts\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n *\r\n * control.reset('Drew');\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value and disabled\r\n *\r\n * ```\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n * console.log(control.status); // 'VALID'\r\n *\r\n * control.reset({ value: 'Drew', disabled: true });\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * console.log(control.status); // 'DISABLED'\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormControl extends AbstractControl {\r\n\r\n\r\n  /**\r\n   * Creates a new `FormControl` instance.\r\n   *\r\n   * @param configs Initializes the control with an object that defines the initial state.\r\n   *\r\n   */\r\n  constructor(configs: ControlConfig) {\r\n    super();\r\n\r\n    this.storeConfig(configs as ControlConfig);\r\n    this._setValidators(configs.validators);\r\n    this._setAsyncValidators(configs.asyncValidator);\r\n    this._initObservables();\r\n    this._applyControlState();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets a new value for the form control.\r\n   *\r\n   * @param value The new value for the control.\r\n   * @param options Configuration options that determine how the control proopagates changes\r\n   * and emits events when the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\r\n   * `onChange` event to\r\n   * update the view.\r\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\r\n   * `ngModelChange`\r\n   * event to update the model.\r\n   *\r\n   */\r\n  setValue(value: any, options: {\r\n    onlySelf?: boolean,\r\n    emitEvent?: boolean\r\n  } = {}): void {\r\n    (this as { value: any }).value = value;\r\n    this.markAsDirty();\r\n    this.updateValueAndValidity(options);\r\n\r\n    if (_.has((<ControlConfig>this.configuration).props, ['submitOnChange']) || _.has(<FormConfigs>this.parent.configuration, ['submitOnChange'])) {\r\n\r\n      this.parent.submit(true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  reset(value: any = null, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    this._applyControlState();\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    (this as { value: any }).value = null;\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  _runValidator(): ValidationErrors | null {\r\n    return this.validator ? this.validator(this) : null;\r\n  }\r\n\r\n\r\n  _runAsyncValidator = _.debounce((emitEvent?: boolean) => {\r\n\r\n    if (this.asyncValidator) {\r\n      (this as { status: string }).status = PENDING;\r\n      const obs = this.asyncValidator(this);\r\n      this._asyncValidationSubscription =\r\n        obs.subscribe((errors: ValidationErrors | null) => {\r\n          if ((this.touched || this.dirty) && this.value) {\r\n            (this as { status: string }).status = INVALID;\r\n            this.setErrors(errors, { emitEvent });\r\n          }\r\n        });\r\n    }\r\n  }, 500);\r\n\r\n  _cancelExistingSubscription(): void {\r\n    if (this._asyncValidationSubscription) {\r\n      this._asyncValidationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the synchronous validators that are active on this control.  Calling\r\n   * this overwrites any existing sync validators.\r\n   */\r\n  private _setValidators = (validators: ValidationConfigs | null) => {\r\n\r\n    (this as { validator: ValidatorFn | null }).validator = coerceToValidator(validators);\r\n\r\n  };\r\n\r\n  /**\r\n   * Sets the async validators that are active on this control. Calling this\r\n   * overwrites any existing async validators.\r\n   */\r\n  private _setAsyncValidators = (asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): void => {\r\n    (this as { asyncValidator: ValidatorFn | null }).asyncValidator = coerceToAsyncValidator(asyncValidators);\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n\r\n    if (this.disabled) return DISABLED;\r\n    if (this.errors) return INVALID;\r\n    if (this.pending) return PENDING;\r\n\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._cancelExistingSubscription();\r\n    (this as { errors: ValidationErrors | null }).errors = this._runValidator();\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (this.status === VALID || this.status === PENDING) {\r\n      this._runAsyncValidator(opts.emitEvent);\r\n    }\r\n  }\r\n\r\n\r\n  private _applyControlState = () => {\r\n\r\n    (this as { value: any }).value = (<ControlConfig>this.configuration).value || null;\r\n    // state.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\r\n    //         this.enable({onlySelf: true, emitEvent: false});\r\n  };\r\n\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  _allControlsDisabled(): boolean {\r\n    return this.disabled;\r\n  }\r\n}\r\n\r\n\r\nfunction coerceToValidator(validators: ValidationConfigs): ValidatorFn | null {\r\n\r\n  return Validators.compose(convertToValidatorFn(validators));\r\n};\r\n\r\nfunction convertToValidatorFn(validators: ValidationConfigs): ValidatorFn[] {\r\n  return _.map(validators, (value, key) => {\r\n    if (!_.has(Validators, key)) return null;\r\n\r\n    return Validators[key];\r\n  });\r\n}\r\n\r\nfunction coerceToAsyncValidator(asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): AsyncValidatorFn | null {\r\n\r\n  return _.isArray(asyncValidators) ? Validators.composeAsync(_.map(asyncValidators, (value: AsyncValidatorFn, key): AsyncValidatorFn | null => value)) : asyncValidators || null;\r\n};\r\n","import _ from 'lodash';\r\nimport { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\n\r\n/**\r\n * Tracks the value and validity state of a group of `FormControl` instances.\r\n *\r\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\r\n * with each control name as the key.  It calculates its status by reducing the status values\r\n * of its children. For example, if one of the controls in a group is invalid, the entire\r\n * group becomes invalid.\r\n *\r\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\r\n * along with `FormControl` and `FormArray`.\r\n *\r\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\r\n * argument. The key for each child registers the name for the control.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Create a form group with 2 controls\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   first: new FormControl('Nancy', Validators.minLength(2)),\r\n *   last: new FormControl('Drew'),\r\n * });\r\n *\r\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\r\n * console.log(form.status);  // 'VALID'\r\n * ```\r\n *\r\n * ### Create a form group with a group-level validator\r\n *\r\n * You include group-level validators as the second arg, or group-level async\r\n * validators as the third arg. These come in handy when you want to perform validation\r\n * that considers the value of more than one child control.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('', Validators.minLength(2)),\r\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\r\n * }, passwordMatchValidator);\r\n *\r\n *\r\n * function passwordMatchValidator(g: FormGroup) {\r\n *    return g.get('password').value === g.get('passwordConfirm').value\r\n *       ? null : {'mismatch': true};\r\n * }\r\n * ```\r\n *\r\n * Like `FormControl` instances, you choose to pass in\r\n * validators and async validators as part of an options object.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('')\r\n *   passwordConfirm: new FormControl('')\r\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\r\n * ```\r\n *\r\n * ### Set the updateOn property for all controls in a form group\r\n *\r\n * The options object is used to set a default value for each child\r\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\r\n * group level, all child controls default to 'blur', unless the child\r\n * has explicitly specified a different `updateOn` value.\r\n *\r\n * ```ts\r\n * const c = new FormGroup({\r\n *   one: new FormControl()\r\n * }, { updateOn: 'blur' });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormGroup extends AbstractControl {\r\n\r\n  private _readonly: Boolean = false;\r\n\r\n  public readonly ngSubmit: EventEmitter<any>;\r\n\r\n  get readonly(): Boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(status: Boolean) {\r\n\r\n    this._readonly = status;\r\n\r\n    this.updateValueAndValidity({ emitEvent: true });\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Reports whether the form submission has been triggered.\r\n   */\r\n  public readonly submitted: boolean = false;\r\n\r\n  /**\r\n   *\r\n   * @param controls A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n\r\n  public readonly controls: { [key: string]: FormControl } = {};\r\n\r\n\r\n  /**\r\n   * Creates a new `FormGroup` instance.\r\n   *\r\n   * @param formState A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n  constructor(public formState: ControlConfig[], public formConfigs: FormConfigs) {\r\n    super();\r\n    this.storeConfig(<FormConfigs>formConfigs);\r\n    this._setUpControls();\r\n    this._initObservables();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n    this._applyFormState();\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the `FormGroup`. It accepts an object that matches\r\n   * the structure of the group, with control names as keys.\r\n   *\r\n   * @usageNotes\r\n   * ### Set the complete value for the form group\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl(),\r\n   *   last: new FormControl()\r\n   * });\r\n   *\r\n   * console.log(form.value);   // {first: null, last: null}\r\n   *\r\n   * form.setValue({first: 'Nancy', last: 'Drew'});\r\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\r\n   * ```\r\n   *\r\n   * @throws When strict checks fail, such as setting the value of a control\r\n   * that doesn't exist or if you excluding the value of a control.\r\n   *\r\n   * @param value The new value for the control that matches the structure of the group.\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  setValue(value: { [key: string]: any }, options: { onlySelf?: boolean, emitEvent?: boolean } = {}):\r\n    void {\r\n\r\n    _.forOwn(value, (value, name) => {\r\n      this._throwIfControlMissing(name);\r\n      this.controls[name].setValue(value, { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n\r\n\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  reset(value: any = {}, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n\r\n  }\r\n\r\n  /**\r\n   * Clear the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].clear({ onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves a child control given the control's name or path.\r\n   *\r\n   * @param name A dot-delimited string or array of string/number values that define the path to the\r\n   * control.\r\n   *\r\n   * @usageNotes\r\n   * ### Retrieve a nested control\r\n   *\r\n   * For example, to get a `name` control nested within a `person` sub-group:\r\n   *\r\n   * * `this.form.get('person.name');`\r\n   *\r\n   * -OR-\r\n   *\r\n   * * `this.form.get(['person', 'name']);`\r\n   */\r\n  get(name: string = null): FormControl | null {\r\n    if (name == null) return null;\r\n\r\n    return this.controls.hasOwnProperty(name as string) ? this.controls[name] : null;\r\n  }\r\n\r\n  submit(instant: boolean = false): void {\r\n    (this as { submitted: Boolean }).submitted = true;\r\n    this.updateValueAndValidity();\r\n    (this as { ngSubmit: EventEmitter<any> }).ngSubmit.emit({\r\n      value: this.value, instant\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n    // // if (this._allControlsDisabled()) return DISABLED;\r\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\r\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _setUpControls(): void {\r\n    _.each(this.formState, (c: ControlConfig) => {\r\n      this.controls[c.name] = new FormControl(c);\r\n      this.controls[c.name].setParent(this);\r\n    });\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n    (this as { ngSubmit: Observable<any> }).ngSubmit = new EventEmitter();\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n    (this as { value: any }).value = this._reduceValue();\r\n\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n  }\r\n\r\n  /** @internal */\r\n  _reduceValue() {\r\n    const form_value: { [k: string]: AbstractControl } = {};\r\n    _.each(_.keys(this.controls), k => {\r\n      if (this._isNotExcluded(this.controls[k])) {\r\n        form_value[k] = this.controls[k].value;\r\n      }\r\n    });\r\n    return form_value;\r\n  }\r\n\r\n  private _applyFormState = () => {\r\n    this.readonly = _.has(this.formConfigs, ['readonly']);\r\n  };\r\n\r\n  /** @internal */\r\n  _allControlsDisabled(): boolean {\r\n    return _.every(this.controls, (c: AbstractControl) => c.disabled);\r\n  }\r\n\r\n  /** @internal */\r\n  _anyControlsHaveStatus(status: string): boolean {\r\n\r\n    return !!_.find(this.controls, ['status', status]);\r\n  }\r\n\r\n  _isNotExcluded = (c: FormControl): Boolean => {\r\n\r\n    return !_.get(c.configuration, 'props.exclude') && !(_.has(this.formConfigs, ['nullExclusion']) && !c.value);\r\n\r\n  };\r\n\r\n  /** @internal */\r\n  _throwIfControlMissing(name: string): void {\r\n    if (!_.keys(this.controls).length) {\r\n      throw new Error(`\r\n        There are no form controls registered with this group yet.  If you're using ngModel,\r\n        you may want to check next tick (e.g. use setTimeout).\r\n      `);\r\n    }\r\n    if (!this.controls[name]) {\r\n      throw new Error(`Cannot find form control with name: ${name}.`);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class IonarFormBuilder {\r\n\r\n\r\n  group = (formState: ControlConfig[], formConfigs?: FormConfigs): FormGroup => {\r\n\r\n    return new FormGroup(formState, formConfigs);\r\n  };\r\n}\r\n\r\n\r\n"],"names":["EventEmitter","Component","ElementRef","Input","Output","HostListener","HostBinding","NgModule","CommonModule","ViewChild","ChangeDetectorRef","ChangeDetectionStrategy","MenuComponent","untilDestroyed","Directive","ComponentFactoryResolver","ViewContainerRef","Subject","Injectable","TemplateRef","distinctUntilChanged","ContentChildren","Renderer2","Host","ContentChild","ControlComponent","forkJoin","map","tslib_1.__extends"],"mappings":"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"}
