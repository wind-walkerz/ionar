{"version":3,"sources":["ng://@ionar/form/ui/components/select/container/select.component.ts","ng://@ionar/form/ui/components/select/components/control/control.component.ts","ng://@ionar/form/ui/components/select/components/menu/menu.component.ts","ng://@ionar/form/ui/components/select/components/menu/option/option.component.ts","ng://@ionar/form/ui/components/select/select.module.ts","ng://@ionar/form/ui/components/upload/containers/upload.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/click/click.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/drop/drop.component.ts","ng://@ionar/form/ui/components/upload/components/file/file.component.ts","ng://@ionar/form/ui/components/upload/upload.module.ts","ng://@ionar/form/ui/components/input/input.component.ts","ng://@ionar/form/ui/components/input/input.module.ts","ng://@ionar/form/ui/components/checkbox/checkbox.component.ts","ng://@ionar/form/ui/components/checkbox/checkbox.module.ts","ng://@ionar/form/ui/components/textarea/textarea.component.ts","ng://@ionar/form/ui/components/textarea/textarea.module.ts","ng://@ionar/form/ui/components/menu/menu.component.ts","ng://@ionar/form/ui/components/menu/menu.module.ts","ng://@ionar/form/ui/ui.module.ts","node_modules/tslib/tslib.es6.js","ng://@ionar/form/core/directives/dynamic-field.directive.ts","ng://@ionar/form/core/providers/form.service.ts","ng://@ionar/form/core/directives/field-template.directive.ts","ng://@ionar/form/core/core.component.ts","ng://@ionar/form/core/components/control.component.ts","ng://@ionar/form/core/components/field.component.ts","ng://@ionar/form/core/directives/submit.directive.ts","ng://@ionar/form/core/components/label.component.ts","ng://@ionar/form/core/components/feedback.component.ts","ng://@ionar/form/core/core.module.ts","ng://@ionar/form/lib/form.module.ts","ng://@ionar/form/core/models/AbstractControl.ts","ng://@ionar/form/core/models/Validator.ts","ng://@ionar/form/core/models/FormControl.ts","ng://@ionar/form/core/models/FormGroup.ts","ng://@ionar/form/core/providers/form_builder.ts"],"names":["SelectComponent","eRef","_this","this","show_menu","selected_option","options","value","change","EventEmitter","blur","invalid","onToggleMenu","onChange","option","_","map","item","selected","isEqual","emit","prototype","ngOnInit","find","toString","clickout","event","nativeElement","contains","target","Component","args","selector","template","ElementRef","Input","Output","HostListener","ControlComponent","label","tabindex","focus","HostBinding","MenuComponent","onSelectOption","OptionComponent","data","disabled","onClick","btn","SelectModule","NgModule","declarations","imports","CommonModule","exports","entryComponents","UploadComponent","elRef","file_list","type","multiple","_defaultTempRef","ngOnChanges","changes","onFileChanged","concat","ViewChild","ClickComponent","DropComponent","drop_hover","onDrop","$event","preventDefault","dataTransfer","files","onDragOver","onDragLeave","FileComponent","cd","name","reader","FileReader","readAsDataURL","onload","image","result","markForCheck","ChangeDetectorRef","UploadModule","InputComponent","placeholder","range","readonly","enter","host_focus","host_invalid","onFocus","onBlur","debounce","e","stopPropagation","min","parseInt","max","onKeyPress","keyCode","onKeyDown","onNumberKeyDown","onPhoneKeyDown","onPaste","onNumberPaste","onPhonePaste","ctrlKey","metaKey","shiftKey","test","clipboardData","getData","templateContext","props","events","keydown","keypress","paste","ngOnDestroy","changeDetection","ChangeDetectionStrategy","OnPush","host","[class.disabled]","[class.readonly]","InputModule","CheckboxComponent","title","CheckboxModule","TextareaComponent","TextareaModule","MenuComponent$1","MenuModule","UIModule","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","call","apply","DynamicFieldDirective","_resolver","_vcRef","components","input","textarea","upload","menu","createComponent","component","_controlConfig","factory","resolveComponentFactory","_compRef","initContext","parseContext","updateContext","instance","Error","componentType","status","context","_invalid","_value","_options","_readonly","_template","forOwn","key","undefined","_events","pipe","untilDestroyed","subscribe","destroy","Directive","ComponentFactoryResolver","ViewContainerRef","FormService","$initialize","Subject","initialize","formGroup","next","getFormGroup","getControl","get","convertToFormData","form","FormData","isArray","each","file","append","convertToMediaType","media_type","toLowerCase","JSON","stringify","ngAfterViewInit","Injectable","FieldTemplateDirective","_tplRef","clear","TemplateRef","FormComponent","_formSvs","submit","viewInitialized","controlRoster","keys","controls","values","_subscription","unsubscribe","ngSubmit","distinctUntilChanged","valid","instant","mediaType","ngAfterViewChecked","detectChanges","default_template","_contentVcRef","parentElement","children","providers","read","ContentChildren","ControlComponent$1","_renderer","_elRef","_parent","show_feedback","show_label","_checkTemplate","_control","setAttribute","has","addClass","templateData","_fieldTemplateDir","_fieldTemplateDirList","toArray","fieldTemplate","Renderer2","decorators","Host","ContentChild","FieldComponent","onChanged","setValue","onTouched","markAsTouched","onEntered","control","controlConfig","dirty","touched","submitted","_statusSubscription","_submitSubscription","statusChanges","detach","SubmitDirective","_formGr","LabelComponent","startCase","FeedbackComponent","generate_feedback","validator","minLength","maxLength","error_list","errors","CoreModule","IonarFormModule","AbstractControl","pristine","storeConfig","config","configuration","defineProperty","DISABLED","VALID","INVALID","PENDING","updateValueAndValidity","onlySelf","markAsUntouched","opts","markAsDirty","markAsPristine","setErrors","_updateControlsErrors","emitEvent","setParent","parent","_setInitialStatus","_updateValue","enabled","_updateValidity","_initObservables","valueChanges","_allControlsDisabled","_calculateStatus","Validators","composeAsync","asyncValidators","presentValidators","filter","isPresent","observables","_executeAsyncValidators","validators","v","forkJoin","_mergeErrors","_isBoxedValue","validator_configs","isPlainObject","required","c","isEmptyInputValue","email","EMAIL_REGEXP","stringLength","actualLength","equalTo","compareWith","isString","compare","compared_control","compose","_executeValidators","o","arrayOfErrors","reduce","err","FormControl","configs","_super","_runAsyncValidator","asyncValidator","obs","_asyncValidationSubscription","_setValidators","coerceToValidator","convertToValidatorFn","_setAsyncValidators","coerceToAsyncValidator","_applyControlState","tslib_1.__extends","reset","_runValidator","_cancelExistingSubscription","pending","FormGroup","formState","formConfigs","_applyFormState","_isNotExcluded","_setUpControls","_throwIfControlMissing","_anyControlsHaveStatus","_reduceValue","form_value","k","every","IonarFormBuilder","group","providedIn"],"mappings":"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","sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Component({\r\n  selector: 'io-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\n\r\nexport class SelectComponent implements OnInit {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  show_menu: Boolean = false;\r\n  selected_option: any = null;\r\n  @Input() options: any = null;\r\n  @Input() value = null;\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Input() invalid: Boolean = false;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  constructor(private eRef: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.value) {\r\n      this.selected_option = _.find(this.options, ['value', this.value.toString()]);\r\n    }\r\n  }\r\n\r\n  ///-----------------------------------------------  General Functions   -----------------------------------------------///\r\n\r\n\r\n  onToggleMenu = () => {\r\n    this.show_menu = !this.show_menu;\r\n  };\r\n\r\n\r\n  onChange = option => {\r\n\r\n    this.options = _.map(this.options, (item: { value: any, label: any, selected: Boolean }) => {\r\n      item.selected = _.isEqual(item, option);\r\n      this.selected_option = item;\r\n      return item;\r\n    });\r\n    this.show_menu = false;\r\n\r\n    this.change.emit(this.selected_option.value);\r\n\r\n  };\r\n\r\n  ///-----------------------------------------------  Host   -----------------------------------------------///\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickout(event) {\r\n    if (!this.eRef.nativeElement.contains(event.target)) {\r\n      this.show_menu = false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Component, ElementRef, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\n\n\n\n@Component({\n  selector: 'control',\n  templateUrl: './control.component.html',\n  styleUrls: ['./control.component.scss'],\n\n})\nexport class ControlComponent implements OnInit {\n  @Input() show_menu = false;\n  @Input() label = null;\n\n  constructor(private eRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.eRef.nativeElement.focus();\n  }\n\n  @HostBinding() tabindex = 0;\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <select-option\n                  [data]=\"option\"\n                  (click)=\"this.onSelectOption.emit(option)\"\n          ></select-option>\n      </ng-container>\n  `,\n  styles: [`\n      :host {\n          background-color: white;\n          border-radius: 5px;\n          box-sizing: border-box;\n          border: 1px solid rgb(196, 202, 212);\n          overflow-y: scroll;\n          padding: 0 10px;\n          position: absolute;\n          top: 100%;\n          z-index: 9999;\n          width: 100%;\n          max-height: 20rem;\n      }\n  `]\n})\nexport class MenuComponent implements OnInit {\n  @Input() options = [];\n  @Output() onSelectOption = new EventEmitter<any>();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { AfterViewInit, Component, HostBinding, HostListener, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'select-option',\n  template: `\n      <p>\n          {{data.label}}\n      </p>`,\n  styleUrls: ['./option.component.scss']\n})\nexport class OptionComponent implements OnInit {\n  @Input() data = null;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.selected = this.data.selected;\n    this.disabled = this.data.disabled;\n  }\n\n\n  @HostBinding('class.selected') selected: Boolean = false;\n  @HostBinding('class.disabled') disabled: Boolean = false;\n\n  @HostListener('click', ['$event.target']) onClick(btn) {\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SelectComponent } from './container/select.component';\r\nimport { ControlComponent } from './components/control/control.component';\r\nimport { MenuComponent } from './components/menu/menu.component';\r\nimport { OptionComponent } from './components/menu/option/option.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SelectComponent,\r\n    ControlComponent,\r\n    MenuComponent,\r\n    OptionComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    SelectComponent\r\n  ],\r\n  entryComponents: [SelectComponent]\r\n})\r\nexport class SelectModule {\r\n}\r\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  TemplateRef, ViewChild\n} from '@angular/core';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'io-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.scss']\n})\nexport class UploadComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  file_list = [];\n  @Output() change = new EventEmitter();\n  @Input() invalid: Boolean = false;\n  @Input() type: string = 'input';\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n  @ViewChild('default') private _defaultTempRef: TemplateRef<any>;\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private elRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    if (!this.template) {\n      this.template = this._defaultTempRef;\n    }\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n  onFileChanged(file_list) {\n    this.file_list = this.file_list.concat(_.map(file_list));\n\n    this.change.emit(this.multiple ? this.file_list : this.file_list[0]);\n\n  }\n\n};\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input, OnChanges,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { el } from '@angular/platform-browser/testing/src/browser_util';\n\n@Component({\n  selector: 'click',\n  templateUrl: './click.component.html',\n  styleUrls: ['./click.component.scss']\n})\nexport class ClickComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Output() change = new EventEmitter();\n\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ngOnChanges(changes): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { Component, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: 'drop',\n  templateUrl: './drop.component.html',\n  styleUrls: ['./drop.component.scss']\n})\nexport class DropComponent implements OnInit {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Output() change = new EventEmitter();\n  @Input() multiple: Boolean = false;\n  @Input() template: TemplateRef<any>;\n\n  @HostBinding('class.drop_hover') drop_hover: Boolean = false;\n\n  @HostListener('drop', ['$event'])\n  onDrop = $event => {\n    event.preventDefault();\n    this.change.emit($event.dataTransfer.files);\n    this.drop_hover = false;\n  };\n\n  @HostListener('dragover', ['$event'])\n  onDragOver = $event => {\n    event.preventDefault();\n    this.drop_hover = true;\n  };\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave = $event => {\n    event.preventDefault();\n    this.drop_hover = false;\n  };\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'file',\n  templateUrl: './file.component.html',\n  styleUrls: ['./file.component.scss']\n})\nexport class FileComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Input() data;\n  image;\n  name = '';\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    const reader: FileReader = new FileReader();\n    reader.readAsDataURL(this.data);\n    reader.onload = () => {\n      this.image = reader.result;\n\n      // need to run CD since file load runs outside of zone\n      this.cd.markForCheck();\n    };\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  };\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UploadComponent } from './containers/upload.component';\r\nimport { ClickComponent } from './components/upload-zone/click/click.component';\r\nimport { DropComponent } from './components/upload-zone/drop/drop.component';\r\nimport { FileComponent } from './components/file/file.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UploadComponent,\r\n    ClickComponent,\r\n    DropComponent,\r\n    FileComponent\r\n  ],\r\n  imports: [CommonModule],\r\n  exports: [UploadComponent],\r\n  entryComponents: [UploadComponent]\r\n})\r\nexport class UploadModule {\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'io-input',\r\n  templateUrl: `./input.component.html`,\r\n  styleUrls: ['./input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.disabled]': 'disabled',\r\n    '[class.readonly]': 'readonly'\r\n  }\r\n})\r\n\r\nexport class InputComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n\r\n  @Input() type = '';\r\n  @Input() name = '';\r\n  @Input() placeholder = '';\r\n  @Input() value: any = null;\r\n\r\n\r\n  @Input() invalid: Boolean = false;\r\n  @Input() disabled: Boolean = false;\r\n  @Input() range = [];\r\n  @Input() readonly: Boolean = false;\r\n\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Output() enter = new EventEmitter();\r\n\r\n  @Input() template: TemplateRef<any>;\r\n\r\n  @HostBinding('class.focus') host_focus: Boolean = false;\r\n  @HostBinding('class.invalid') host_invalid: Boolean = false;\r\n\r\n\r\n  templateContext;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.templateContext = {\r\n      props: {\r\n        value: this.value,\r\n        type: this.type,\r\n        name: this.name,\r\n        placeholder: this.placeholder,\r\n        invalid: this.invalid,\r\n        disabled: this.disabled,\r\n        range: this.range,\r\n        readonly: this.readonly\r\n      },\r\n      events: {\r\n        change: this.change,\r\n        blur: this.blur,\r\n        enter: this.enter,\r\n        keydown: this.onKeyDown,\r\n        keypress: this.onKeyPress,\r\n        paste: this.onPaste\r\n      }\r\n    };\r\n\r\n    this.host_invalid = this.invalid;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.host_invalid = this.invalid;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onFocus = () => {\r\n    this.host_focus = true;\r\n  };\r\n\r\n  onBlur = () => {\r\n    this.blur.emit();\r\n    this.host_focus = false;\r\n    this.cd.markForCheck();\r\n  };\r\n\r\n  onChange = _.debounce(e => {\r\n    e.stopPropagation();\r\n    let value = e.target.value;\r\n    const min = parseInt(this.range[0], 10);\r\n    const max = parseInt(this.range[1], 10);\r\n    if (this.range && this.type === 'number' && !(min <= value && value <= max)) {\r\n      value = e.target.value = this.range[1];\r\n    }\r\n\r\n    this.change.emit(value);\r\n\r\n  }, 500);\r\n\r\n  //  Keyboard & Clipboard Event  //\r\n\r\n  onKeyPress = (e: KeyboardEvent) => {\r\n    if (e.keyCode === 13) this.enter.emit();\r\n  };\r\n\r\n  onKeyDown = (e: KeyboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberKeyDown(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhoneKeyDown(e)\r\n        : null;\r\n  };\r\n\r\n  onPaste = (e: ClipboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberPaste(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhonePaste(e)\r\n        : null;\r\n  };\r\n\r\n\r\n  // Ensure that it is a number from [0-9] no decimal_point\r\n\r\n  onPhoneKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a number or string of number\r\n  onPhonePaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n  // Ensure that it is a  number: integer || decimal\r\n  onNumberKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      e.keyCode === 188 ||    // comma(\",\")\r\n      e.keyCode === 110 ||        //   numpad decimal point\r\n      e.keyCode === 190 ||        // period(\".\")\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a string of number: integer || decimal\r\n  onNumberPaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d.+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputComponent } from './input.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    InputComponent\r\n  ],\r\n  entryComponents: [InputComponent]\r\n})\r\nexport class InputModule {\r\n}\r\n","import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'io-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n\n  @Input() label: string;\n  @Input() title: any = '';\n  @Input() value: Boolean = false;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  @HostListener('click')\n  onClick = () => {\n    this.value = !this.value;\n    this.change.emit(this.value);\n  };\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CheckboxComponent } from './checkbox.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CheckboxComponent\r\n  ],\r\n  exports: [\r\n    CheckboxComponent\r\n  ],\r\n  entryComponents: [CheckboxComponent]\r\n})\r\nexport class CheckboxModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-textarea',\n  template: `\n      <textarea\n              [name]=\"name\"\n              [value]=\"value\"\n              [class.invalid]=\"invalid\"\n              cols=\"1\" rows=\"1\"\n              [placeholder]=\"placeholder\"\n              \n              (change)=\"$event.stopPropagation(); change.emit($event.target.value);\"\n              (blur)=\"blur.emit()\"\n      ></textarea>\n  `,\n  styles: [`\n      :host {\n          display: flex;\n          flex: 1;\n      }\n\n      textarea {\n          border: none;\n          font-size: 1.5rem;\n          padding: 1rem;\n          width: 100%;\n          max-width: 100%;\n          overflow-y: scroll;\n      }\n  `]\n})\nexport class TextareaComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Input() name: string = '';\n  @Input() value: any = '';\n  @Input() placeholder: any = '';\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  }\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { NgModule } from '@angular/core';\r\nimport {TextareaComponent } from './textarea.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextareaComponent\r\n  ],\r\n  exports: [TextareaComponent],\r\n  entryComponents: [TextareaComponent]\r\n})\r\nexport class TextareaModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <div\n                  class=\"option\"\n                  [class.active]=\"option.value === value\"\n                  (click)=\"onSelectOption(option)\"\n          >\n              {{option.label}}\n          </div>\n      </ng-container>\n  `,\n  styleUrls: [`./menu.component.scss`]\n})\nexport class MenuComponent implements OnInit, OnChanges {\n  @Input() options: ({ label: any, value: any, disable?: boolean })[] = [];\n  @Input() name = '';\n  @Input() value: any = null;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Output() enter = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n  onSelectOption = option => {\n    this.change.emit(option.value);\n    this.blur.emit();\n  };\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenuComponent } from './menu.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MenuComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    MenuComponent\r\n  ],\r\n  entryComponents: [MenuComponent]\r\n})\r\nexport class MenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SelectModule } from './components/select/select.module';\r\nimport { UploadModule } from './components/upload/upload.module';\r\n\r\nimport { InputModule } from './components/input/input.module';\r\nimport { CheckboxModule } from './components/checkbox/checkbox.module';\r\nimport { TextareaModule } from './components/textarea/textarea.module';\r\nimport { MenuModule } from './components/menu/menu.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n  exports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n\r\n})\r\nexport class UIModule {\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport _ from 'lodash';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { InputComponent, MenuComponent, TextareaComponent, UploadComponent } from '../../ui';\r\n\r\n\r\n@Directive({\r\n  selector: '[dynamic_field]'\r\n})\r\nexport class DynamicFieldDirective implements OnInit, OnDestroy, OnChanges {\r\n  @Input('readonly') private _readonly: Boolean;\r\n  @Input('controlConfig') private _controlConfig: ControlConfig;\r\n  @Input('events') private _events: { [key: string]: Function };\r\n\r\n  @Input('invalid') private _invalid: Boolean;\r\n  @Input('value') private _value: any;\r\n  @Input('options') private _options: any;\r\n\r\n  @Input('template') private _template: Boolean;\r\n\r\n  private _compRef: ComponentRef<any>;\r\n\r\n  components = {\r\n    input: InputComponent,\r\n    textarea: TextareaComponent,\r\n    // select: AuroraSelectComponent,\r\n    // datepicker: AuroraDatePickerComponent,\r\n    // checkbox: AuroraCheckboxComponent,\r\n    upload: UploadComponent,\r\n    menu: MenuComponent\r\n    // radio: AuroraRadioComponent\r\n  };\r\n\r\n  constructor(\r\n    private _resolver: ComponentFactoryResolver,\r\n    private _vcRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createComponent();\r\n  }\r\n\r\n  ngOnChanges() {\r\n\r\n    if (this._compRef) {\r\n      this.updateContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._compRef) this._compRef.destroy();\r\n  }\r\n\r\n  createComponent = () => {\r\n    const component = this.components[this._controlConfig.type];\r\n    const factory = this._resolver.resolveComponentFactory<any>(component);\r\n    this._compRef = this._vcRef.createComponent(factory);\r\n    this.initContext();\r\n  };\r\n\r\n  private initContext = () => {\r\n    this.parseContext();\r\n  };\r\n\r\n  private updateContext = () => {\r\n    this.parseContext('updated');\r\n    if (typeof this._compRef.instance.ngOnChanges === 'function') {\r\n      this._compRef.instance.ngOnChanges();\r\n    } else {\r\n      throw new Error(`${this._compRef.componentType.name} doesn't implement 'ngOnChanges'`);\r\n    }\r\n\r\n  };\r\n\r\n  private parseContext = (status = 'initial') => {\r\n    const context = {\r\n      name: this._controlConfig.name,\r\n      invalid: this._invalid,\r\n      ...this._controlConfig.props,\r\n      value: this._value,\r\n      options: this._options,\r\n      readonly: this._readonly,\r\n      template: this._template\r\n    };\r\n\r\n    _.forOwn(context, (value, key) => {\r\n      if (value !== undefined) this._compRef.instance[key] = value;\r\n    });\r\n\r\n    if (status === 'initial') {\r\n      _.forOwn(this._events, (value, key) => {\r\n\r\n        if (!this._compRef.instance[key])\r\n          this._compRef.instance[key] = new EventEmitter();\r\n\r\n        this._compRef.instance[key].pipe(untilDestroyed(this)).subscribe(event => {\r\n          (value instanceof EventEmitter)\r\n            ? value.emit(event)\r\n            : value(event);\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n  };\r\n}\r\n","import { AfterViewInit, Injectable, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { AbstractControl } from '../models/AbstractControl';\r\nimport { ValidationConfigs } from '../models/Validator';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Injectable()\r\n\r\nexport class FormService implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  private formGroup: FormGroup;\r\n\r\n  $initialize = new Subject()\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  initialize = (formGroup: FormGroup) => {\r\n    this.formGroup = formGroup;\r\n    this.$initialize.next(formGroup)\r\n  };\r\n\r\n\r\n  getFormGroup = (): FormGroup => this.formGroup;\r\n  getControl = (name): AbstractControl => this.formGroup.get(name);\r\n\r\n  convertToFormData = data => {\r\n    const form = new FormData();\r\n\r\n    _.forOwn(data, (value, key) => {\r\n      if (_.isArray(value)) {\r\n        _.each(value, file => form.append(`${key}[]`, file, file.name));\r\n      } else form.append(key, value);\r\n\r\n    });\r\n\r\n    return form;\r\n  };\r\n\r\n  convertToMediaType = (value, media_type) => {\r\n\r\n    if (media_type) {\r\n      switch (media_type.toLowerCase()) {\r\n        case 'json':\r\n          return JSON.stringify(value);\r\n        case 'form-data':\r\n          return this.convertToFormData(value);\r\n        default:\r\n          return value;\r\n      }\r\n    }\r\n    return value;\r\n  };\r\n\r\n}\r\n\r\n\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component, Directive, Input,\r\n  OnInit, TemplateRef, ViewContainerRef\r\n} from '@angular/core';\r\n\r\n\r\n@Directive({\r\n  selector: '[fieldTemplate]'\r\n})\r\nexport class FieldTemplateDirective implements OnInit, AfterViewInit {\r\n\r\n  @Input() name: any = '';\r\n\r\n  constructor(\r\n    private _vcRef: ViewContainerRef,\r\n    private _tplRef: TemplateRef<any>\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._vcRef.clear();\r\n  }\r\n}\r\n","import {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges, ViewChild\r\n} from '@angular/core';\r\nimport { FormService } from './providers/form.service';\r\n\r\nimport { FormGroup } from './models/FormGroup';\r\nimport { FormControl } from './models/FormControl';\r\nimport { ControlComponent } from './components/control.component';\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@Component({\r\n  selector: 'io-form',\r\n  template: `\r\n      <ng-container>\r\n          <ng-template #contentVc>\r\n              <ng-content></ng-content>\r\n          </ng-template>\r\n\r\n          <ng-container *ngIf=\"viewInitialized\">\r\n\r\n              <ng-container *ngIf=\"!default_template\">\r\n                  <ng-container [ngTemplateOutlet]=\"contentVc\"></ng-container>\r\n              </ng-container>\r\n\r\n              <ng-container *ngIf=\"default_template\">\r\n                  <ng-container *ngFor=\"let name of controlRoster\">\r\n                      <form-control\r\n                              [name]=\"name\"\r\n                              [formGroup]=\"formGroup\"\r\n                      >\r\n                      </form-control>\r\n                  </ng-container>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n\r\n      </ng-container>\r\n\r\n\r\n\r\n  `,\r\n  styles: [`\r\n\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [FormService]\r\n})\r\n\r\nexport  class FormComponent implements AfterViewChecked, OnDestroy {\r\n\r\n  @Input() formGroup: FormGroup;\r\n\r\n  @Input() mediaType: String;\r\n  @Output() submit = new EventEmitter();\r\n\r\n  @ViewChild('contentVc', { read: ElementRef }) protected _contentVcRef;\r\n\r\n  @ContentChildren(FieldTemplateDirective) _fieldTemplateDirList;\r\n\r\n  controlRoster: string[];\r\n\r\n  controls: FormControl[];\r\n\r\n  default_template: Boolean;\r\n\r\n  viewInitialized: Boolean = false;\r\n\r\n  protected _subscription: Subscription;\r\n\r\n  constructor(protected _formSvs: FormService, protected cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n\r\n    if (this.formGroup) {\r\n\r\n      this.parseContext();\r\n      this.viewInitialized = true;\r\n      this.cd.detectChanges();\r\n      if (!this.default_template) {\r\n        this.default_template = this._contentVcRef.nativeElement.parentElement.children.length === 0;\r\n      }\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n\r\n  parseContext = () => {\r\n    this._formSvs.initialize(this.formGroup);\r\n    this.controlRoster = _.keys(this.formGroup.controls);\r\n\r\n    this.controls = _.values(this.formGroup.controls);\r\n\r\n    if (this._subscription) this._subscription.unsubscribe();\r\n\r\n    this._subscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this), distinctUntilChanged()).subscribe((data: { value: any, instant: boolean }) => {\r\n\r\n      if (this.formGroup.valid || data.instant) {\r\n\r\n        this.submit.emit(this._formSvs.convertToMediaType(data.value, this.mediaType));\r\n      }\r\n\r\n\r\n    });\r\n  };\r\n\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { FormComponent } from '../core.component';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FieldTemplateDirective } from '../directives/field-template.directive';\r\n\r\n@Component({\r\n  selector: 'form-control',\r\n  template: `\r\n\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <form-label *ngIf=\"show_label\"></form-label>\r\n\r\n          <form-field></form-field>\r\n\r\n          <form-feedback *ngIf=\"show_feedback\"></form-feedback>\r\n      </ng-container>\r\n\r\n  `,\r\n\r\n  styles: [`\r\n      :host {\r\n          display: grid;\r\n          grid-template-areas: \"label   field\" \". feedback\";\r\n          grid-template-columns: 3fr 7fr;\r\n          grid-template-rows: 1fr auto;\r\n          margin-bottom: 1rem;\r\n          height: auto;\r\n          visibility: visible;\r\n          z-index: 50;\r\n      }\r\n\r\n      :host-context(.hide-label) {\r\n          grid-template-areas: \"field\" \"feedback\";\r\n          grid-template-columns: 1fr;\r\n      }\r\n\r\n      :host-context(.hide-feedback) {\r\n          grid-template-areas: \"label   field\";\r\n          grid-template-columns: 3fr 7fr;\r\n      }\r\n\r\n      :host-context(.hide-label.hide-feedback) {\r\n          grid-template-areas: \"field\";\r\n      }\r\n\r\n      :host-context(.hidden) {\r\n          display: none !important;\r\n      }\r\n\r\n      form-label {\r\n          grid-area: label;\r\n      }\r\n\r\n      form-field {\r\n          grid-area: field;\r\n      }\r\n\r\n      form-feedback {\r\n          grid-area: feedback;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ControlComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  @Input() name: any = '';\r\n\r\n  @Input() formGroup: FormGroup;\r\n  _control: FormControl;\r\n\r\n  fieldTemplate: TemplateRef<any>;\r\n\r\n  show_feedback: Boolean = true;\r\n\r\n  show_label: Boolean = true;\r\n\r\n  @ContentChild(FieldTemplateDirective) private _fieldTemplateDir;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    public cd: ChangeDetectorRef,\r\n    private _renderer: Renderer2,\r\n    private _elRef: ElementRef,\r\n    @Host() private _parent: FormComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this._checkTemplate();\r\n\r\n    this._control = this.formGroup.get(this.name);\r\n\r\n\r\n    this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.name);\r\n\r\n    const props = (<ControlConfig>this._control.configuration).props;\r\n    if (_.has(props, ['hidden'])) {\r\n\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hidden');\r\n    }\r\n\r\n    if (_.has(props, ['hideLabel'])) {\r\n      this.show_label = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-label');\r\n    }\r\n\r\n\r\n    if (_.has(props, ['hideFeedback'])) {\r\n      this.show_feedback = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-feedback');\r\n    }\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n\r\n  private _checkTemplate = () => {\r\n\r\n    const templateData = this._fieldTemplateDir ? this._fieldTemplateDir : _.find(this._parent._fieldTemplateDirList.toArray(), ['name', this.name]);\r\n\r\n    if (templateData) {\r\n\r\n      this.fieldTemplate = templateData._tplRef;\r\n    }\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges, TemplateRef\r\n} from '@angular/core';\r\n\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { untilDestroyed } from '@ionar/utility';\r\n\r\n\r\n@Component({\r\n  selector: 'form-field',\r\n  template: `\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <ng-container\r\n                  dynamic_field\r\n                  [controlConfig]=\"controlConfig\"\r\n\r\n                  [events]=\"{\r\n                            change: onChanged,\r\n                            blur: onTouched,\r\n                            enter: onEntered\r\n                    }\"\r\n                  [template]=\"template\"\r\n\r\n                  [value]=\"control.value\"\r\n                  [options]=\"controlConfig.options\"\r\n                  [invalid]=\"invalid\"\r\n                  [readonly]=\"formGroup.readonly\"\r\n          >\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          width: 100%;\r\n          height: 100%;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FieldComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  formGroup: FormGroup;\r\n  control: FormControl;\r\n  controlConfig: ControlConfig;\r\n\r\n  invalid: Boolean = false;\r\n  template: TemplateRef<any>\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.parseContext();\r\n    //\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onChanged = e => {\r\n    this._formSvs.getControl(this._parent.name).setValue(e);\r\n  };\r\n\r\n  onTouched = () => {\r\n    this._formSvs.getControl(this._parent.name).markAsTouched();\r\n  };\r\n\r\n  onEntered = () => {\r\n    // this.formSvs._onEntered()\r\n    // if (this.name === 'password') this.focus = true;\r\n  };\r\n\r\n  parseContext = () => {\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.template = this._parent.fieldTemplate\r\n    this.invalid = this.control.invalid && (this.control.dirty || this.control.touched || this.formGroup.submitted);\r\n    this.cd.detectChanges();\r\n\r\n  };\r\n\r\n}\r\n","import { Directive, ElementRef, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '../models/FormGroup';\n\n@Directive({\n  selector: '[submitForm]'\n})\nexport class SubmitDirective implements OnInit, OnDestroy, OnChanges {\n\n  @Input('submitForm') private _formGr: FormGroup;\n  @Input() disabled: Boolean = false;\n\n  @HostListener('click', ['$event'])\n  onClick = (e: MouseEvent) => {\n\n    if (!this.disabled) {\n\n      this._formGr.submit();\n    }\n\n  };\n\n  constructor(private _elRef: ElementRef) {\n\n  }\n\n\n  ngOnInit(): void {\n    // console.log(this._formGr)\n  }\n\n  ngOnChanges() {\n    // console.log(this._formGr)\n  }\n\n  ngOnDestroy() {\n\n  }\n\n\n}\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\nimport { ControlComponent } from './control.component';\r\n\r\n\r\n@Component({\r\n  selector: 'form-label',\r\n  template: `\r\n      {{label}}\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          align-items: center;\r\n          color: rgba(0, 0, 0, 0.85);\r\n          font-size: 1.6rem;\r\n          font-weight: 700;\r\n          position: relative\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LabelComponent implements OnInit, AfterViewChecked, OnDestroy {\r\n  formGroup: FormGroup;\r\n  controlConfig: ControlConfig;\r\n  control: FormControl;\r\n\r\n  label: any;\r\n\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.label = this.controlConfig.label || _.startCase(this._parent.name);\r\n\r\n    this.cd.detectChanges();\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'form-feedback',\r\n  template: `\r\n      <ng-container *ngIf=\"show_feedback\">\r\n          <ng-container *ngIf=\"invalid\">\r\n              <ng-container *ngFor=\"let err of error_list\">\r\n                  <div class=\"feedback\">{{err}}</div>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  //language=SCSS\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: flex-start;\r\n          width: 100%;\r\n          color: #f5222d;\r\n          font-size: 1.2rem;\r\n          margin-top: 0.5rem;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeedbackComponent implements OnInit, OnChanges, AfterViewChecked, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  _control: FormControl;\r\n  formGroup: FormGroup;\r\n\r\n  invalid: Boolean = false;\r\n  error_list: string[] | null;\r\n  show_feedback: Boolean = true;\r\n\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n\r\n  generate_feedback = (validator, value) => {\r\n\r\n    // const feedback = this._control.validateOptions.feedback\r\n\r\n    const feedback = {};\r\n\r\n    // console.log(_.values(this._control.configuration.validators))\r\n\r\n\r\n    // _.mapValues(this._control.configuration.validators, (value: any) => {\r\n    //   feedback[validator] = _.isString(value) ? value : value.message || null;\r\n    // });\r\n\r\n\r\n    if (!validator) return null;\r\n\r\n    switch (validator) {\r\n      case 'required':\r\n        if (this._parent.name === 'confirm_password') {\r\n          return feedback['required'] || `You need to confirm password`;\r\n        }\r\n        return feedback['required'] || `${_.startCase(this._parent.name)}  is required`;\r\n      case 'agreement':\r\n        return feedback['agreement'] || `You must agree to the terms and conditions before continuing!`;\r\n      case 'email' :\r\n        return feedback['email'] || `Invalid email address. Valid e-mail can contain only latin letters, numbers, '@' and '.'`;\r\n      case 'email_existed':\r\n        return feedback['email_existed'] || `${_.startCase(this._parent.name)} is existed! Please use another one`;\r\n\r\n      case 'stringLength' :\r\n\r\n        return value.minLength ? `${_.startCase(this._parent.name)} cannot be shorter than ${value.minLength}` : `${_.startCase(this._parent.name)} cannot be longer than ${value.maxLength}`;\r\n\r\n      case 'equalTo' :\r\n\r\n        return `Confirm password is not equal to password`;\r\n\r\n      default:\r\n        return value;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  ngOnChanges(changes): void {\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  parseContext = () => {\r\n    this._control = this.formGroup.get(this._parent.name);\r\n    this.invalid = this._control.invalid && (this._control.dirty || this._control.touched || this.formGroup.submitted);\r\n    this.error_list = _.map(this._control.errors, (value, key) => this.generate_feedback(key, value));\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DynamicFieldDirective } from './directives/dynamic-field.directive';\r\n\r\nimport { FieldComponent } from './components/field.component';\r\n\r\nimport { SubmitDirective } from './directives/submit.directive';\r\n\r\n\r\nimport { ControlComponent } from './components/control.component';\r\nimport { LabelComponent } from './components/label.component';\r\nimport { FeedbackComponent } from './components/feedback.component';\r\nimport { FormComponent } from './core.component';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent,\r\n    FieldComponent, ControlComponent, LabelComponent, FeedbackComponent, FieldTemplateDirective,\r\n    DynamicFieldDirective, SubmitDirective\r\n  ],\r\n\r\n  imports: [CommonModule],\r\n  exports: [\r\n    FormComponent,\r\n    FieldComponent,\r\n    SubmitDirective,\r\n    ControlComponent,\r\n    LabelComponent, FeedbackComponent, FieldTemplateDirective\r\n  ]\r\n})\r\nexport class CoreModule {\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIModule } from '../ui/ui.module';\nimport { CoreModule } from '../core/core.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CoreModule,\n    UIModule\n  ],\n  exports: [\n    CoreModule,\n    UIModule\n  ]\n})\nexport class IonarFormModule {\n}\n","import { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nimport { ValidationErrors, ValidatorFn } from './Validator';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * This is the base class for `FormControl`, `FormGroup.ts`, and `FormArray`.\r\n *\r\n * It provides some of the shared behavior that all controls and groups of controls have, like\r\n * running validators, calculating status, and resetting state. It also defines the properties\r\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\r\n * instantiated directly.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nexport abstract class AbstractControl {\r\n\r\n  public readonly configuration: ControlConfig | FormConfigs;\r\n\r\n  /** @internal */\r\n  public readonly pendingValue: any;\r\n\r\n  /**\r\n   * The current value of the control.\r\n   *\r\n   * * For a `FormControl`, the current value.\r\n   * * For a `FormGroup`, the values of enabled controls as an object with a key-value pair for each member of the group.\r\n   * * For a `FormArray`, the values of enabled controls as an array.\r\n   *\r\n   */\r\n  public readonly value: any;\r\n\r\n  /**\r\n   * An object containing any errors generated by failing validation,\r\n   * or null if there are no errors.\r\n   */\r\n\r\n  public readonly errors: ValidationErrors | null;\r\n\r\n  /**\r\n   * True if the control is marked as `touched`.\r\n   *\r\n   * A control is marked `touched` once the user has triggered\r\n   * a `blur` event on it.\r\n   */\r\n  public readonly touched: boolean = false;\r\n\r\n  /**\r\n   * A control is `pristine` if the user has not yet changed the value in the UI.\r\n   *\r\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  public readonly pristine: boolean = true;\r\n\r\n  /**\r\n   * The validation status of the control. There are four possible\r\n   * validation status values:\r\n   *\r\n   * * **VALID**: This control has passed all validation checks.\r\n   * * **INVALID**: This control has failed at least one validation check.\r\n   * * **PENDING**: This control is in the midst of conducting a validation check.\r\n   * * **DISABLED**: This control is exempt from validation checks.\r\n   *\r\n   * These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.\r\n   */\r\n  public readonly status: string;\r\n\r\n  public readonly validator: ValidatorFn | null;\r\n\r\n  public readonly asyncValidator: ValidatorFn | null;\r\n\r\n  public _asyncValidationSubscription: any;\r\n\r\n  private _parent: FormGroup;\r\n\r\n  /**\r\n   * @description\r\n   * Emits an event when the form submission has been triggered.\r\n   */\r\n\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the value of the control changes, in\r\n   * the UI or programmatically.\r\n   */\r\n  public readonly valueChanges: Observable<any>;\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the validation `status` of the control\r\n   * recalculates.\r\n   */\r\n  public readonly statusChanges: Observable<any>;\r\n\r\n\r\n  /**\r\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has any status other than 'DISABLED',\r\n   * false if the status is 'DISABLED'.\r\n   *\r\n   */\r\n  get enabled(): boolean {\r\n    return this.status !== DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `disabled` when its `status` is `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * Disabled controls are exempt from validation checks and\r\n   * are not included in the aggregate value of their ancestor\r\n   * controls.\r\n   *\r\n   * @returns True if the control is disabled, false otherwise.\r\n   */\r\n  get disabled(): boolean {\r\n    return this.status === DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `valid` when its `status` is `VALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has passed all of its validation tests,\r\n   * false otherwise.\r\n   */\r\n  get valid(): boolean {\r\n    return this.status === VALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `invalid` when its `status` is `INVALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control has failed one or more of its validation checks,\r\n   * false otherwise.\r\n   */\r\n  get invalid(): boolean {\r\n    return this.status === INVALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `pending` when its `status` is `PENDING`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control is in the process of conducting a validation check,\r\n   * false otherwise.\r\n   */\r\n  get pending(): boolean {\r\n    return this.status === PENDING;\r\n  }\r\n\r\n  /**\r\n   * A control is `dirty` if the user has changed the value\r\n   * in the UI.\r\n   *\r\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  get dirty(): boolean {\r\n    return !this.pristine;\r\n  }\r\n\r\n\r\n  /**\r\n   * The parent control.\r\n   */\r\n  get parent(): FormGroup {\r\n    return this._parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the control as `touched`. A control is touched by focus and\r\n   * blur events that do not change the value; compare `markAsDirty`;\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsTouched(): void {\r\n    (this as { touched: boolean }).touched = true;\r\n\r\n    this.updateValueAndValidity({ onlySelf: true });\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `untouched`.\r\n   *\r\n   * If the control has any children, also marks all children as `untouched`\r\n   * and recalculates the `touched` status of all parent controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after the marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsUntouched(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { touched: boolean }).touched = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `dirty`. A control becomes dirty when\r\n   * the control's value is changed through the UI; compare `markAsTouched`.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsDirty(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `pristine`.\r\n   *\r\n   * If the control has any children, marks all children as `pristine`,\r\n   * and recalculates the `pristine` status of all parent\r\n   * controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control emits events after\r\n   * marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false..\r\n   */\r\n  markAsPristine(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = true;\r\n  }\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  /**\r\n   * @param parent Sets the parent of the control\r\n   */\r\n  setParent(parent: FormGroup): void {\r\n    this._parent = parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Recalculates the value and validation status of the control.\r\n   *\r\n   * By default, it also updates the value and validity of its ancestors.\r\n   *\r\n   * @param opts Configuration options determine how the control propagates changes and emits events\r\n   * after updates and validity checks are applied.\r\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\r\n   * update all direct ancestors. Default is false..\r\n   * * `emitEvent`: When true or not supplied (the default), emit the `valueChanges` event\r\n   * observables emit events with the latest status and value when the control is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  updateValueAndValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._setInitialStatus();\r\n    this._updateValue();\r\n    if (this.enabled) {\r\n      this._updateValidity(opts);\r\n\r\n    }\r\n\r\n\r\n    if (opts.emitEvent !== false) {\r\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\r\n      (this.statusChanges as EventEmitter<any>).emit(this.status);\r\n    }\r\n\r\n    if (this._parent && !opts.onlySelf) {\r\n      this._parent.updateValueAndValidity(opts);\r\n    }\r\n\r\n  }\r\n\r\n  storeConfig = (config: ControlConfig | FormConfigs) => {\r\n    (this as { configuration: ControlConfig | FormConfigs }).configuration = config;\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n  }\r\n\r\n\r\n  private _setInitialStatus() {\r\n    (this as { status: string }).status = this._allControlsDisabled() ? DISABLED : VALID;\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateControlsErrors(emitEvent: boolean): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (emitEvent) {\r\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\r\n    }\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  abstract _calculateStatus(): string\r\n\r\n\r\n  /**\r\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract setValue(value: any, options?: Object): void;\r\n\r\n  /**\r\n   * Resets the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract reset(value?: any, options?: Object): void;\r\n\r\n  /**\r\n   * Clear the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract clear(options?: Object): void;\r\n\r\n  /** @internal */\r\n  abstract _allControlsDisabled(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const VALID = 'VALID';\r\n\r\n/**\r\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const INVALID = 'INVALID';\r\n\r\n/**\r\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\r\n * errors are not yet available for the input value.\r\n *\r\n * @see `markAsPending`\r\n * @see `status`\r\n */\r\nexport const PENDING = 'PENDING';\r\n\r\n/**\r\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\r\n * calculations of validity or value.\r\n *\r\n * @see `markAsDisabled`\r\n * @see `status`\r\n */\r\nexport const DISABLED = 'DISABLED';\r\n\r\nexport type FormHooks = 'change' | 'blur' | 'submit';\r\n","import { FormControl } from './FormControl';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport _ from 'lodash';\r\nimport { Form } from '@angular/forms';\r\nimport { map } from 'rxjs/operators';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nexport interface ValidationErrors {\r\n  [key: string]: any\r\n}\r\n\r\nexport interface ValidationConfigs {\r\n  required?: true | String,\r\n  email?: true | String,\r\n  stringLength?: {\r\n    min?: number,\r\n    max?: number,\r\n    message?: string\r\n  },\r\n\r\n  equalTo?: { compare?: string, message?: string } | string,\r\n\r\n  [name: string]: ValidatorType\r\n}\r\n\r\n\r\nexport type ValidatorType = { message?: any, [name: string]: any }\r\n  | string\r\n  | true\r\n  | ValidatorFn\r\n  | AsyncValidatorFn\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ValidatorFn {\r\n  (control: FormControl): ValidationErrors | null\r\n}\r\n\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface AsyncValidatorFn {\r\n  (control: FormControl): Observable<ValidationErrors | null>;\r\n}\r\n\r\n/**\r\n * @description\r\n * Provides a set of built-in validators that can be used by form controls.\r\n *\r\n * A validator is a function that processes a `FormControl` or collection of\r\n * controls and returns an error map or null. A null map means that validation has passed.\r\n * @publicApi\r\n */\r\n// @dynamic\r\nexport class Validators {\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control have a non-empty value.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field is non-empty\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('', Validators.required);\r\n   *\r\n   * console.log(control.errors); // {required: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `required` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static required = (c: FormControl): ValidationErrors | null =>\r\n    isEmptyInputValue(c.value) ? { 'required': true } : null;\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value pass an email validation test.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field matches a valid email pattern\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('bad@', Validators.email);\r\n   *\r\n   * console.log(control.errors); // {email: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `email` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static email = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the length of the control's value to be greater than or equal\r\n   * to the provided minimum length. This validator is also provided by default if you use the\r\n   * the HTML5 `minlength` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field has a minimum of 3 characters\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('ng', Validators.minLength(3));\r\n   *\r\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input minlength=\"5\">\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `minlength` if the validation check fails, otherwise `null`.\r\n   */\r\n  static stringLength = (control: FormControl): ValidationErrors | null => {\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    if (controlConfig.type !== ('input' || 'textarea')) {\r\n      throw new Error(`'stringLength' validator can only be used with control type 'input' or 'textarea'`);\r\n    }\r\n\r\n    const\r\n      min: number = controlConfig.validators['stringLength'].min,\r\n      max: number = controlConfig.validators['stringLength'].max,\r\n      length: number = control.value ? control.value.length : 0;\r\n\r\n    if (length < min) {\r\n      return {\r\n        'stringLength': {\r\n          'minLength': min,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    if (length > max) {\r\n      return {\r\n        'stringLength': {\r\n          'maxLength': max,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n\r\n  static equalTo = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    const compareWith = _.isString(controlConfig.validators['equalTo']) ? controlConfig.validators['equalTo'] : controlConfig.validators['equalTo'].compare;\r\n\r\n    const compared_control = control.parent.controls[compareWith];\r\n\r\n    return (JSON.stringify(control.value) === JSON.stringify(compared_control.value))\r\n      ? null : { equalTo: controlConfig.validators['equalTo'] };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static compose = (validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null => {\r\n    if (!validators) return null;\r\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\r\n    if (presentValidators.length === 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      return _mergeErrors(_executeValidators(control, presentValidators));\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple async validators into a single function that returns the union\r\n   * of the individual error objects for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static composeAsync(asyncValidators: AsyncValidatorFn[]): AsyncValidatorFn | null {\r\n    if (!asyncValidators) return null;\r\n    const presentValidators: AsyncValidatorFn[] = asyncValidators.filter(isPresent) as any;\r\n    if (presentValidators.length == 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      const observables = _executeAsyncValidators(control, presentValidators);\r\n\r\n      return forkJoin(observables).pipe(\r\n        map(_mergeErrors)\r\n      );\r\n\r\n    };\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _isBoxedValue(validator_configs: { [key: string]: any } | true | ValidatorFn | AsyncValidatorFn): boolean {\r\n    return _.isPlainObject(validator_configs);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nconst EMAIL_REGEXP =\r\n  /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n\r\n\r\nfunction isEmptyInputValue(value: any): boolean {\r\n  // we don't check for string here so it also works with arrays\r\n  return value == null || value.length === 0;\r\n}\r\n\r\nfunction isPresent(o: any): boolean {\r\n  return o != null;\r\n}\r\n\r\nfunction _executeValidators(control: FormControl, validators: ValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _executeAsyncValidators(control: FormControl, validators: AsyncValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors | null {\r\n  const errors: { [key: string]: any } =\r\n    _.reduce(arrayOfErrors, (result: ValidationErrors | null, err: ValidationErrors | null) => {\r\n      return err ? { ...result, ...err } : result;\r\n    }, {});\r\n\r\n  return Object.keys(errors).length === 0 ? null : errors;\r\n\r\n}\r\n","import { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\nimport { AsyncValidatorFn, ValidationConfigs, ValidationErrors, ValidatorFn, Validators } from './Validator';\r\nimport _ from 'lodash';\r\nimport { FormGroup } from '../models/FormGroup';\r\n\r\n\r\n/**\r\n * Tracks the value and validation status of an individual form control.\r\n *\r\n * This is one of the three fundamental building blocks of Angular forms, along with\r\n * `FormGroup.ts` and `FormArray`. It extends the `IonarAbstractControl` class that\r\n * implements most of the base functionality for accessing the value, validation status,\r\n * user interactions and events.\r\n *\r\n * @see `IonarAbstractControl`\r\n * @see [Reactive Forms Guide](guide/reactive-forms)\r\n * @see [Usage Notes](#usage-notes)\r\n *\r\n * @usageNotes\r\n *\r\n * ### Initializing Form Controls\r\n *\r\n * Instantiate a `FormControl`, with an initial value.\r\n *\r\n * ```ts\r\n * const control = new FormControl('some value');\r\n * console.log(control.value);     // 'some value'\r\n *```\r\n *\r\n * The following example initializes the control with a form state object. The `value`\r\n * and `disabled` keys are required in this case.\r\n *\r\n * ```ts\r\n * const control = new FormControl({ value: 'n/a', disabled: true });\r\n * console.log(control.value);     // 'n/a'\r\n * console.log(control.status);    // 'DISABLED'\r\n * ```\r\n *\r\n * The following example initializes the control with a sync validator.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', Validators.required);\r\n * console.log(control.value);      // ''\r\n * console.log(control.status);     // 'INVALID'\r\n * ```\r\n *\r\n * The following example initializes the control using an options object.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', {\r\n *    validators: Validators.required,\r\n *    asyncValidators: myAsyncValidator\r\n * });\r\n * ```\r\n *\r\n * ### Configure the control to update on a blur event\r\n *\r\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'blur' });\r\n * ```\r\n *\r\n * ### Configure the control to update on a submit event\r\n *\r\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'submit' });\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value\r\n *\r\n * You reset to a specific form state by passing through a standalone\r\n * value or a form state object that contains both a value and a disabled state\r\n * (these are the only two properties that cannot be calculated).\r\n *\r\n * ```ts\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n *\r\n * control.reset('Drew');\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value and disabled\r\n *\r\n * ```\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n * console.log(control.status); // 'VALID'\r\n *\r\n * control.reset({ value: 'Drew', disabled: true });\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * console.log(control.status); // 'DISABLED'\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormControl extends AbstractControl {\r\n\r\n\r\n  /**\r\n   * Creates a new `FormControl` instance.\r\n   *\r\n   * @param configs Initializes the control with an object that defines the initial state.\r\n   *\r\n   */\r\n  constructor(configs: ControlConfig) {\r\n    super();\r\n\r\n    this.storeConfig(configs as ControlConfig);\r\n    this._setValidators(configs.validators);\r\n    this._setAsyncValidators(configs.asyncValidator);\r\n    this._initObservables();\r\n    this._applyControlState();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets a new value for the form control.\r\n   *\r\n   * @param value The new value for the control.\r\n   * @param options Configuration options that determine how the control proopagates changes\r\n   * and emits events when the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\r\n   * `onChange` event to\r\n   * update the view.\r\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\r\n   * `ngModelChange`\r\n   * event to update the model.\r\n   *\r\n   */\r\n  setValue(value: any, options: {\r\n    onlySelf?: boolean,\r\n    emitEvent?: boolean\r\n  } = {}): void {\r\n    (this as { value: any }).value = value;\r\n    this.markAsDirty();\r\n    this.updateValueAndValidity(options);\r\n\r\n    if (_.has((<ControlConfig>this.configuration).props, ['submitOnChange']) || _.has(<FormConfigs>this.parent.configuration, ['submitOnChange'])) {\r\n\r\n      this.parent.submit(true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  reset(value: any = null, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    this._applyControlState();\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    (this as { value: any }).value = null;\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  _runValidator(): ValidationErrors | null {\r\n    return this.validator ? this.validator(this) : null;\r\n  }\r\n\r\n\r\n  _runAsyncValidator = _.debounce((emitEvent?: boolean) => {\r\n\r\n    if (this.asyncValidator) {\r\n      (this as { status: string }).status = PENDING;\r\n      const obs = this.asyncValidator(this);\r\n      this._asyncValidationSubscription =\r\n        obs.subscribe((errors: ValidationErrors | null) => {\r\n          if ((this.touched || this.dirty) && this.value) {\r\n            (this as { status: string }).status = INVALID;\r\n            this.setErrors(errors, { emitEvent });\r\n          }\r\n        });\r\n    }\r\n  }, 500);\r\n\r\n  _cancelExistingSubscription(): void {\r\n    if (this._asyncValidationSubscription) {\r\n      this._asyncValidationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the synchronous validators that are active on this control.  Calling\r\n   * this overwrites any existing sync validators.\r\n   */\r\n  private _setValidators = (validators: ValidationConfigs | null) => {\r\n\r\n    (this as { validator: ValidatorFn | null }).validator = coerceToValidator(validators);\r\n\r\n  };\r\n\r\n  /**\r\n   * Sets the async validators that are active on this control. Calling this\r\n   * overwrites any existing async validators.\r\n   */\r\n  private _setAsyncValidators = (asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): void => {\r\n    (this as { asyncValidator: ValidatorFn | null }).asyncValidator = coerceToAsyncValidator(asyncValidators);\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n\r\n    if (this.disabled) return DISABLED;\r\n    if (this.errors) return INVALID;\r\n    if (this.pending) return PENDING;\r\n\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._cancelExistingSubscription();\r\n    (this as { errors: ValidationErrors | null }).errors = this._runValidator();\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (this.status === VALID || this.status === PENDING) {\r\n      this._runAsyncValidator(opts.emitEvent);\r\n    }\r\n  }\r\n\r\n\r\n  private _applyControlState = () => {\r\n\r\n    (this as { value: any }).value = (<ControlConfig>this.configuration).value || null;\r\n    // state.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\r\n    //         this.enable({onlySelf: true, emitEvent: false});\r\n  };\r\n\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  _allControlsDisabled(): boolean {\r\n    return this.disabled;\r\n  }\r\n}\r\n\r\n\r\nfunction coerceToValidator(validators: ValidationConfigs): ValidatorFn | null {\r\n\r\n  return Validators.compose(convertToValidatorFn(validators));\r\n};\r\n\r\nfunction convertToValidatorFn(validators: ValidationConfigs): ValidatorFn[] {\r\n  return _.map(validators, (value, key) => {\r\n    if (!_.has(Validators, key)) return null;\r\n\r\n    return Validators[key];\r\n  });\r\n}\r\n\r\nfunction coerceToAsyncValidator(asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): AsyncValidatorFn | null {\r\n\r\n  return _.isArray(asyncValidators) ? Validators.composeAsync(_.map(asyncValidators, (value: AsyncValidatorFn, key): AsyncValidatorFn | null => value)) : asyncValidators || null;\r\n};\r\n","import _ from 'lodash';\r\nimport { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\n\r\n/**\r\n * Tracks the value and validity state of a group of `FormControl` instances.\r\n *\r\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\r\n * with each control name as the key.  It calculates its status by reducing the status values\r\n * of its children. For example, if one of the controls in a group is invalid, the entire\r\n * group becomes invalid.\r\n *\r\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\r\n * along with `FormControl` and `FormArray`.\r\n *\r\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\r\n * argument. The key for each child registers the name for the control.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Create a form group with 2 controls\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   first: new FormControl('Nancy', Validators.minLength(2)),\r\n *   last: new FormControl('Drew'),\r\n * });\r\n *\r\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\r\n * console.log(form.status);  // 'VALID'\r\n * ```\r\n *\r\n * ### Create a form group with a group-level validator\r\n *\r\n * You include group-level validators as the second arg, or group-level async\r\n * validators as the third arg. These come in handy when you want to perform validation\r\n * that considers the value of more than one child control.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('', Validators.minLength(2)),\r\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\r\n * }, passwordMatchValidator);\r\n *\r\n *\r\n * function passwordMatchValidator(g: FormGroup) {\r\n *    return g.get('password').value === g.get('passwordConfirm').value\r\n *       ? null : {'mismatch': true};\r\n * }\r\n * ```\r\n *\r\n * Like `FormControl` instances, you choose to pass in\r\n * validators and async validators as part of an options object.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('')\r\n *   passwordConfirm: new FormControl('')\r\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\r\n * ```\r\n *\r\n * ### Set the updateOn property for all controls in a form group\r\n *\r\n * The options object is used to set a default value for each child\r\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\r\n * group level, all child controls default to 'blur', unless the child\r\n * has explicitly specified a different `updateOn` value.\r\n *\r\n * ```ts\r\n * const c = new FormGroup({\r\n *   one: new FormControl()\r\n * }, { updateOn: 'blur' });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormGroup extends AbstractControl {\r\n\r\n  private _readonly: Boolean = false;\r\n\r\n  public readonly ngSubmit: EventEmitter<any>;\r\n\r\n  get readonly(): Boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(status: Boolean) {\r\n\r\n    this._readonly = status;\r\n\r\n    this.updateValueAndValidity({ emitEvent: true });\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Reports whether the form submission has been triggered.\r\n   */\r\n  public readonly submitted: boolean = false;\r\n\r\n  /**\r\n   *\r\n   * @param controls A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n\r\n  public readonly controls: { [key: string]: FormControl } = {};\r\n\r\n\r\n  /**\r\n   * Creates a new `FormGroup` instance.\r\n   *\r\n   * @param formState A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n  constructor(public formState: ControlConfig[], public formConfigs: FormConfigs) {\r\n    super();\r\n    this.storeConfig(<FormConfigs>formConfigs);\r\n    this._setUpControls();\r\n    this._initObservables();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n    this._applyFormState();\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the `FormGroup`. It accepts an object that matches\r\n   * the structure of the group, with control names as keys.\r\n   *\r\n   * @usageNotes\r\n   * ### Set the complete value for the form group\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl(),\r\n   *   last: new FormControl()\r\n   * });\r\n   *\r\n   * console.log(form.value);   // {first: null, last: null}\r\n   *\r\n   * form.setValue({first: 'Nancy', last: 'Drew'});\r\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\r\n   * ```\r\n   *\r\n   * @throws When strict checks fail, such as setting the value of a control\r\n   * that doesn't exist or if you excluding the value of a control.\r\n   *\r\n   * @param value The new value for the control that matches the structure of the group.\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  setValue(value: { [key: string]: any }, options: { onlySelf?: boolean, emitEvent?: boolean } = {}):\r\n    void {\r\n\r\n    _.forOwn(value, (value, name) => {\r\n      this._throwIfControlMissing(name);\r\n      this.controls[name].setValue(value, { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n\r\n\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  reset(value: any = {}, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n\r\n  }\r\n\r\n  /**\r\n   * Clear the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].clear({ onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves a child control given the control's name or path.\r\n   *\r\n   * @param name A dot-delimited string or array of string/number values that define the path to the\r\n   * control.\r\n   *\r\n   * @usageNotes\r\n   * ### Retrieve a nested control\r\n   *\r\n   * For example, to get a `name` control nested within a `person` sub-group:\r\n   *\r\n   * * `this.form.get('person.name');`\r\n   *\r\n   * -OR-\r\n   *\r\n   * * `this.form.get(['person', 'name']);`\r\n   */\r\n  get(name: string = null): FormControl | null {\r\n    if (name == null) return null;\r\n\r\n    return this.controls.hasOwnProperty(name as string) ? this.controls[name] : null;\r\n  }\r\n\r\n  submit(instant: boolean = false): void {\r\n    (this as { submitted: Boolean }).submitted = true;\r\n    this.updateValueAndValidity();\r\n    (this as { ngSubmit: EventEmitter<any> }).ngSubmit.emit({\r\n      value: this.value, instant\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n    // // if (this._allControlsDisabled()) return DISABLED;\r\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\r\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _setUpControls(): void {\r\n    _.each(this.formState, (c: ControlConfig) => {\r\n      this.controls[c.name] = new FormControl(c);\r\n      this.controls[c.name].setParent(this);\r\n    });\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n    (this as { ngSubmit: Observable<any> }).ngSubmit = new EventEmitter();\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n    (this as { value: any }).value = this._reduceValue();\r\n\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n  }\r\n\r\n  /** @internal */\r\n  _reduceValue() {\r\n    const form_value: { [k: string]: AbstractControl } = {};\r\n    _.each(_.keys(this.controls), k => {\r\n      if (this._isNotExcluded(this.controls[k])) {\r\n        form_value[k] = this.controls[k].value;\r\n      }\r\n    });\r\n    return form_value;\r\n  }\r\n\r\n  private _applyFormState = () => {\r\n    this.readonly = _.has(this.formConfigs, ['readonly']);\r\n  };\r\n\r\n  /** @internal */\r\n  _allControlsDisabled(): boolean {\r\n    return _.every(this.controls, (c: AbstractControl) => c.disabled);\r\n  }\r\n\r\n  /** @internal */\r\n  _anyControlsHaveStatus(status: string): boolean {\r\n\r\n    return !!_.find(this.controls, ['status', status]);\r\n  }\r\n\r\n  _isNotExcluded = (c: FormControl): Boolean => {\r\n\r\n    return !_.get(c.configuration, 'props.excluded') && !(_.has(this.formConfigs, ['nullExclusion']) && !c.value);\r\n\r\n  };\r\n\r\n  /** @internal */\r\n  _throwIfControlMissing(name: string): void {\r\n    if (!_.keys(this.controls).length) {\r\n      throw new Error(`\r\n        There are no form controls registered with this group yet.  If you're using ngModel,\r\n        you may want to check next tick (e.g. use setTimeout).\r\n      `);\r\n    }\r\n    if (!this.controls[name]) {\r\n      throw new Error(`Cannot find form control with name: ${name}.`);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n","import { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class IonarFormBuilder {\r\n\r\n\r\n  group = (formState: ControlConfig[], formConfigs?: FormConfigs): FormGroup => {\r\n\r\n    return new FormGroup(formState, formConfigs);\r\n  };\r\n}\r\n\r\n\r\n"]}