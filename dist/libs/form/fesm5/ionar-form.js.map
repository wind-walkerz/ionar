{"version":3,"file":"ionar-form.js.map","sources":["ng://@ionar/form/ui/components/select/container/select.component.ts","ng://@ionar/form/ui/components/select/components/control/control.component.ts","ng://@ionar/form/ui/components/select/components/menu/menu.component.ts","ng://@ionar/form/ui/components/select/components/menu/option/option.component.ts","ng://@ionar/form/ui/components/select/select.module.ts","ng://@ionar/form/ui/components/upload/containers/upload.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/click/click.component.ts","ng://@ionar/form/ui/components/upload/components/upload-zone/drop/drop.component.ts","ng://@ionar/form/ui/components/upload/components/file/file.component.ts","ng://@ionar/form/ui/components/upload/upload.module.ts","ng://@ionar/form/ui/components/input/input.component.ts","ng://@ionar/form/ui/components/input/input.module.ts","ng://@ionar/form/ui/components/checkbox/checkbox.component.ts","ng://@ionar/form/ui/components/checkbox/checkbox.module.ts","ng://@ionar/form/ui/components/textarea/textarea.component.ts","ng://@ionar/form/ui/components/textarea/textarea.module.ts","ng://@ionar/form/ui/components/menu/menu.component.ts","ng://@ionar/form/ui/components/menu/menu.module.ts","ng://@ionar/form/ui/ui.module.ts","ng://@ionar/form/core/directives/dynamic-field.directive.ts","ng://@ionar/form/core/providers/form.service.ts","ng://@ionar/form/core/models/AbstractControl.ts","ng://@ionar/form/core/models/Validator.ts","ng://@ionar/form/core/models/FormControl.ts","ng://@ionar/form/core/models/FormGroup.ts","ng://@ionar/form/core/directives/field-template.directive.ts","ng://@ionar/form/core/core.component.ts","ng://@ionar/form/core/components/control.component.ts","ng://@ionar/form/core/components/field.component.ts","ng://@ionar/form/core/directives/submit.directive.ts","ng://@ionar/form/core/components/label.component.ts","ng://@ionar/form/core/components/feedback.component.ts","ng://@ionar/form/core/core.module.ts","ng://@ionar/form/lib/form.module.ts","ng://@ionar/form/core/providers/form_builder.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Component({\r\n  selector: 'io-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\n\r\nexport class SelectComponent implements OnInit {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  show_menu: Boolean = false;\r\n  selected_option: any = null;\r\n  @Input() options: any = null;\r\n  @Input() value = null;\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Input() invalid: Boolean = false;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  constructor(private eRef: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.value) {\r\n      this.selected_option = _.find(this.options, ['value', this.value.toString()]);\r\n    }\r\n  }\r\n\r\n  ///-----------------------------------------------  General Functions   -----------------------------------------------///\r\n\r\n\r\n  onToggleMenu = () => {\r\n    this.show_menu = !this.show_menu;\r\n  };\r\n\r\n\r\n  onChange = option => {\r\n\r\n    this.options = _.map(this.options, (item: { value: any, label: any, selected: Boolean }) => {\r\n      item.selected = _.isEqual(item, option);\r\n      this.selected_option = item;\r\n      return item;\r\n    });\r\n    this.show_menu = false;\r\n\r\n    this.change.emit(this.selected_option.value);\r\n\r\n  };\r\n\r\n  ///-----------------------------------------------  Host   -----------------------------------------------///\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickout(event) {\r\n    if (!this.eRef.nativeElement.contains(event.target)) {\r\n      this.show_menu = false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Component, ElementRef, HostBinding, Input, OnInit, ViewEncapsulation } from '@angular/core';\n\n\n\n@Component({\n  selector: 'control',\n  templateUrl: './control.component.html',\n  styleUrls: ['./control.component.scss'],\n\n})\nexport class ControlComponent implements OnInit {\n  @Input() show_menu = false;\n  @Input() label = null;\n\n  constructor(private eRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.eRef.nativeElement.focus();\n  }\n\n  @HostBinding() tabindex = 0;\n\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <select-option\n                  [data]=\"option\"\n                  (click)=\"this.onSelectOption.emit(option)\"\n          ></select-option>\n      </ng-container>\n  `,\n  styles: [`\n      :host {\n          background-color: white;\n          border-radius: 5px;\n          box-sizing: border-box;\n          border: 1px solid rgb(196, 202, 212);\n          overflow-y: scroll;\n          padding: 0 10px;\n          position: absolute;\n          top: 100%;\n          z-index: 9999;\n          width: 100%;\n          max-height: 20rem;\n      }\n  `]\n})\nexport class MenuComponent implements OnInit {\n  @Input() options = [];\n  @Output() onSelectOption = new EventEmitter<any>();\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { AfterViewInit, Component, HostBinding, HostListener, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'select-option',\n  template: `\n      <p>\n          {{data.label}}\n      </p>`,\n  styleUrls: ['./option.component.scss']\n})\nexport class OptionComponent implements OnInit {\n  @Input() data = null;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.selected = this.data.selected;\n    this.disabled = this.data.disabled;\n  }\n\n\n  @HostBinding('class.selected') selected: Boolean = false;\n  @HostBinding('class.disabled') disabled: Boolean = false;\n\n  @HostListener('click', ['$event.target']) onClick(btn) {\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SelectComponent } from './container/select.component';\r\nimport { ControlComponent } from './components/control/control.component';\r\nimport { MenuComponent } from './components/menu/menu.component';\r\nimport { OptionComponent } from './components/menu/option/option.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SelectComponent,\r\n    ControlComponent,\r\n    MenuComponent,\r\n    OptionComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    SelectComponent\r\n  ],\r\n  entryComponents: [SelectComponent]\r\n})\r\nexport class SelectModule {\r\n}\r\n","import {\n  AfterViewChecked,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  TemplateRef, ViewChild\n} from '@angular/core';\nimport _ from 'lodash';\n\n@Component({\n  selector: 'io-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.scss']\n})\nexport class UploadComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  file_list = [];\n  @Output() change = new EventEmitter();\n  @Input() invalid: Boolean = false;\n  @Input() type: string = 'input';\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n  @ViewChild('default') private _defaultTempRef: TemplateRef<any>;\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private elRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    if (!this.template) {\n      this.template = this._defaultTempRef;\n    }\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n  onFileChanged(file_list) {\n    this.file_list = this.file_list.concat(_.map(file_list));\n\n    this.change.emit(this.multiple ? this.file_list : this.file_list[0]);\n\n  }\n\n};\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input, OnChanges,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { el } from '@angular/platform-browser/testing/src/browser_util';\n\n@Component({\n  selector: 'click',\n  templateUrl: './click.component.html',\n  styleUrls: ['./click.component.scss']\n})\nexport class ClickComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Output() change = new EventEmitter();\n\n  @Input() template: TemplateRef<any>;\n  @Input() multiple: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ngOnChanges(changes): void {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { Component, EventEmitter, HostBinding, HostListener, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: 'drop',\n  templateUrl: './drop.component.html',\n  styleUrls: ['./drop.component.scss']\n})\nexport class DropComponent implements OnInit {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Output() change = new EventEmitter();\n  @Input() multiple: Boolean = false;\n  @Input() template: TemplateRef<any>;\n\n  @HostBinding('class.drop_hover') drop_hover: Boolean = false;\n\n  @HostListener('drop', ['$event'])\n  onDrop = $event => {\n    event.preventDefault();\n    this.change.emit($event.dataTransfer.files);\n    this.drop_hover = false;\n  };\n\n  @HostListener('dragover', ['$event'])\n  onDragOver = $event => {\n    event.preventDefault();\n    this.drop_hover = true;\n  };\n\n  @HostListener('dragleave', ['$event'])\n  onDragLeave = $event => {\n    event.preventDefault();\n    this.drop_hover = false;\n  };\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'file',\n  templateUrl: './file.component.html',\n  styleUrls: ['./file.component.scss']\n})\nexport class FileComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n\n  @Input() data;\n  image;\n  name = '';\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor(private cd: ChangeDetectorRef) {\n  }\n\n  ngOnInit() {\n    const reader: FileReader = new FileReader();\n    reader.readAsDataURL(this.data);\n    reader.onload = () => {\n      this.image = reader.result;\n\n      // need to run CD since file load runs outside of zone\n      this.cd.markForCheck();\n    };\n  }\n\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  };\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UploadComponent } from './containers/upload.component';\r\nimport { ClickComponent } from './components/upload-zone/click/click.component';\r\nimport { DropComponent } from './components/upload-zone/drop/drop.component';\r\nimport { FileComponent } from './components/file/file.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UploadComponent,\r\n    ClickComponent,\r\n    DropComponent,\r\n    FileComponent\r\n  ],\r\n  imports: [CommonModule],\r\n  exports: [UploadComponent],\r\n  entryComponents: [UploadComponent]\r\n})\r\nexport class UploadModule {\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\n@Component({\r\n  selector: 'io-input',\r\n  templateUrl: `./input.component.html`,\r\n  styleUrls: ['./input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    '[class.disabled]': 'disabled',\r\n    '[class.readonly]': 'readonly'\r\n  }\r\n})\r\n\r\nexport class InputComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n\r\n  @Input() type = '';\r\n  @Input() name = '';\r\n  @Input() placeholder = '';\r\n  @Input() value: any = null;\r\n\r\n\r\n  @Input() invalid: Boolean = false;\r\n  @Input() disabled: Boolean = false;\r\n  @Input() range = [];\r\n  @Input() readonly: Boolean = false;\r\n\r\n  @Output() change = new EventEmitter();\r\n  @Output() blur = new EventEmitter();\r\n  @Output() enter = new EventEmitter();\r\n\r\n  @Input() template: TemplateRef<any>;\r\n\r\n  @HostBinding('class.focus') host_focus: Boolean = false;\r\n  @HostBinding('class.invalid') host_invalid: Boolean = false;\r\n\r\n\r\n  templateContext;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.templateContext = {\r\n      props: {\r\n        value: this.value,\r\n        type: this.type,\r\n        name: this.name,\r\n        placeholder: this.placeholder,\r\n        invalid: this.invalid,\r\n        disabled: this.disabled,\r\n        range: this.range,\r\n        readonly: this.readonly\r\n      },\r\n      events: {\r\n        change: this.change,\r\n        blur: this.blur,\r\n        enter: this.enter,\r\n        keydown: this.onKeyDown,\r\n        keypress: this.onKeyPress,\r\n        paste: this.onPaste\r\n      }\r\n    };\r\n\r\n    this.host_invalid = this.invalid;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.host_invalid = this.invalid;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onFocus = () => {\r\n    this.host_focus = true;\r\n  };\r\n\r\n  onBlur = () => {\r\n    this.blur.emit();\r\n    this.host_focus = false;\r\n    this.cd.markForCheck();\r\n  };\r\n\r\n  onChange = _.debounce(e => {\r\n    e.stopPropagation();\r\n    console.log(e.target.value);\r\n    let value = e.target.value;\r\n    const min = parseInt(this.range[0], 10);\r\n    const max = parseInt(this.range[1], 10);\r\n    if (this.range && this.type === 'number' && !(min <= value && value <= max)) {\r\n      value = e.target.value = this.range[1];\r\n    }\r\n\r\n    this.change.emit(value);\r\n\r\n  }, 500);\r\n\r\n  //  Keyboard & Clipboard Event  //\r\n\r\n  onKeyPress = (e: KeyboardEvent) => {\r\n    if (e.keyCode === 13) this.enter.emit();\r\n  };\r\n\r\n  onKeyDown = (e: KeyboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberKeyDown(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhoneKeyDown(e)\r\n        : null;\r\n  };\r\n\r\n  onPaste = (e: ClipboardEvent) => {\r\n    return (this.type === 'number')\r\n      ? this.onNumberPaste(e)\r\n      : (this.type === 'phone')\r\n        ? this.onPhonePaste(e)\r\n        : null;\r\n  };\r\n\r\n\r\n  // Ensure that it is a number from [0-9] no decimal_point\r\n\r\n  onPhoneKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a number or string of number\r\n  onPhonePaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n  // Ensure that it is a  number: integer || decimal\r\n  onNumberKeyDown = (e: KeyboardEvent) => {\r\n    // Allow\r\n    if (\r\n      e.keyCode === 8 ||      // backspace\r\n      e.keyCode === 9 ||          // Tab\r\n      e.keyCode === 13 ||       // enter\r\n      e.keyCode === 188 ||    // comma(\",\")\r\n      e.keyCode === 110 ||        //   numpad decimal point\r\n      e.keyCode === 190 ||        // period(\".\")\r\n      (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||      //  Ctrl + A\r\n      (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||       //  Ctrl + C\r\n      (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + X\r\n      (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||        //  Ctrl + V\r\n      (e.keyCode >= 35 && e.keyCode <= 39)                             // home, end, left, right\r\n    ) {\r\n      return;\r\n    }\r\n\r\n\r\n    // Reject if not a number or numpad\r\n    if (\r\n      (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&       // not number\r\n      (e.keyCode < 96 || e.keyCode > 105)                                     // not numpad\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n  };\r\n\r\n  // Ensure that pasted value is a string of number: integer || decimal\r\n  onNumberPaste = (e: ClipboardEvent) => {\r\n    if (!/^\\d.+$/.test(e.clipboardData.getData('Text'))) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { InputComponent } from './input.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    InputComponent\r\n  ],\r\n  entryComponents: [InputComponent]\r\n})\r\nexport class InputModule {\r\n}\r\n","import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'io-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n\n  @Input() label: string;\n  @Input() title: any = '';\n  @Input() value: Boolean = false;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  @HostListener('click')\n  onClick = () => {\n    this.value = !this.value;\n    this.change.emit(this.value);\n  };\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CheckboxComponent } from './checkbox.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CheckboxComponent\r\n  ],\r\n  exports: [\r\n    CheckboxComponent\r\n  ],\r\n  entryComponents: [CheckboxComponent]\r\n})\r\nexport class CheckboxModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-textarea',\n  template: `\n      <textarea\n              [name]=\"name\"\n              [value]=\"value\"\n              [class.invalid]=\"invalid\"\n              cols=\"1\" rows=\"1\"\n              [placeholder]=\"placeholder\"\n              \n              (change)=\"$event.stopPropagation(); change.emit($event.target.value);\"\n              (blur)=\"blur.emit()\"\n      ></textarea>\n  `,\n  styles: [`\n      :host {\n          display: flex;\n          flex: 1;\n      }\n\n      textarea {\n          border: none;\n          font-size: 1.5rem;\n          padding: 1rem;\n          width: 100%;\n          max-width: 100%;\n          overflow-y: scroll;\n      }\n  `]\n})\nexport class TextareaComponent implements OnInit, OnChanges {\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\n  @Input() name: string = '';\n  @Input() value: any = '';\n  @Input() placeholder: any = '';\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  }\n\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\n\n}\n","import { NgModule } from '@angular/core';\r\nimport {TextareaComponent } from './textarea.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextareaComponent\r\n  ],\r\n  exports: [TextareaComponent],\r\n  entryComponents: [TextareaComponent]\r\n})\r\nexport class TextareaModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'io-menu',\n  template: `\n      <ng-container *ngFor=\"let option of options\">\n          <div\n                  class=\"option\"\n                  [class.active]=\"option.value === value\"\n                  (click)=\"onSelectOption(option)\"\n          >\n              {{option.label}}\n          </div>\n      </ng-container>\n  `,\n  styleUrls: [`./menu.component.scss`]\n})\nexport class MenuComponent implements OnInit, OnChanges {\n  @Input() options: ({ label: any, value: any, disable?: boolean })[] = [];\n  @Input() name = '';\n  @Input() value: any = null;\n  @Output() change = new EventEmitter();\n  @Output() blur = new EventEmitter();\n  @Output() enter = new EventEmitter();\n  @Input() invalid: Boolean = false;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n  onSelectOption = option => {\n    this.change.emit(option.value);\n    this.blur.emit();\n  };\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenuComponent } from './menu.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MenuComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    MenuComponent\r\n  ],\r\n  entryComponents: [MenuComponent]\r\n})\r\nexport class MenuModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SelectModule } from './components/select/select.module';\r\nimport { UploadModule } from './components/upload/upload.module';\r\n\r\nimport { InputModule } from './components/input/input.module';\r\nimport { CheckboxModule } from './components/checkbox/checkbox.module';\r\nimport { TextareaModule } from './components/textarea/textarea.module';\r\nimport { MenuModule } from './components/menu/menu.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n  exports: [\r\n    InputModule, CheckboxModule, UploadModule, SelectModule, TextareaModule, MenuModule\r\n  ],\r\n\r\n})\r\nexport class UIModule {\r\n}\r\n","import {\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\n\r\nimport _ from 'lodash';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { InputComponent, MenuComponent, TextareaComponent, UploadComponent } from '../../ui';\r\n\r\n\r\n@Directive({\r\n  selector: '[dynamic_field]'\r\n})\r\nexport class DynamicFieldDirective implements OnInit, OnDestroy, OnChanges {\r\n  @Input('readonly') private _readonly: Boolean;\r\n  @Input('controlConfig') private _controlConfig: ControlConfig;\r\n  @Input('events') private _events: { [key: string]: Function };\r\n\r\n  @Input('invalid') private _invalid: Boolean;\r\n  @Input('value') private _value: any;\r\n  @Input('options') private _options: any;\r\n\r\n  @Input('template') private _template: Boolean;\r\n\r\n  private _compRef: ComponentRef<any>;\r\n\r\n  components = {\r\n    input: InputComponent,\r\n    textarea: TextareaComponent,\r\n    // select: AuroraSelectComponent,\r\n    // datepicker: AuroraDatePickerComponent,\r\n    // checkbox: AuroraCheckboxComponent,\r\n    upload: UploadComponent,\r\n    menu: MenuComponent\r\n    // radio: AuroraRadioComponent\r\n  };\r\n\r\n  constructor(\r\n    private _resolver: ComponentFactoryResolver,\r\n    private _vcRef: ViewContainerRef\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createComponent();\r\n  }\r\n\r\n  ngOnChanges() {\r\n\r\n    if (this._compRef) {\r\n      this.updateContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._compRef) this._compRef.destroy();\r\n  }\r\n\r\n  createComponent = () => {\r\n    const component = this.components[this._controlConfig.type];\r\n    const factory = this._resolver.resolveComponentFactory<any>(component);\r\n    this._compRef = this._vcRef.createComponent(factory);\r\n    this.initContext();\r\n  };\r\n\r\n  private initContext = () => {\r\n    this.parseContext();\r\n  };\r\n\r\n  private updateContext = () => {\r\n    this.parseContext('updated');\r\n    if (typeof this._compRef.instance.ngOnChanges === 'function') {\r\n      this._compRef.instance.ngOnChanges();\r\n    } else {\r\n      throw new Error(`${this._compRef.componentType.name} doesn't implement 'ngOnChanges'`);\r\n    }\r\n\r\n  };\r\n\r\n  private parseContext = (status = 'initial') => {\r\n    const context = {\r\n      name: this._controlConfig.name,\r\n      invalid: this._invalid,\r\n      ...this._controlConfig.props,\r\n      value: this._value,\r\n      options: this._options,\r\n      readonly: this._readonly,\r\n      template: this._template\r\n    };\r\n\r\n    _.forOwn(context, (value, key) => {\r\n      if (value !== undefined) this._compRef.instance[key] = value;\r\n    });\r\n\r\n    if (status === 'initial') {\r\n      _.forOwn(this._events, (value, key) => {\r\n\r\n        if (!this._compRef.instance[key])\r\n          this._compRef.instance[key] = new EventEmitter();\r\n\r\n        this._compRef.instance[key].pipe(untilDestroyed(this)).subscribe(event => {\r\n          (value instanceof EventEmitter)\r\n            ? value.emit(event)\r\n            : value(event);\r\n        });\r\n\r\n      });\r\n    }\r\n\r\n  };\r\n}\r\n","import { AfterViewInit, Injectable, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { AbstractControl } from '../models/AbstractControl';\r\nimport { ValidationConfigs } from '../models/Validator';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport _ from 'lodash';\r\n\r\n\r\n@Injectable()\r\n\r\nexport class FormService implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  private formGroup: FormGroup;\r\n\r\n  $initialize = new Subject()\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  initialize = (formGroup: FormGroup) => {\r\n    this.formGroup = formGroup;\r\n    this.$initialize.next(formGroup)\r\n  };\r\n\r\n\r\n  getFormGroup = (): FormGroup => this.formGroup;\r\n  getControl = (name): AbstractControl => this.formGroup.get(name);\r\n\r\n  convertToFormData = data => {\r\n    const form = new FormData();\r\n\r\n    _.forOwn(data, (value, key) => {\r\n      if (_.isArray(value)) {\r\n        _.each(value, file => form.append(`${key}[]`, file, file.name));\r\n      } else form.append(key, value);\r\n\r\n    });\r\n\r\n    return form;\r\n  };\r\n\r\n  convertToMediaType = (value, media_type) => {\r\n\r\n    if (media_type) {\r\n      switch (media_type.toLowerCase()) {\r\n        case 'json':\r\n          return JSON.stringify(value);\r\n        case 'form-data':\r\n          return this.convertToFormData(value);\r\n        default:\r\n          return value;\r\n      }\r\n    }\r\n    return value;\r\n  };\r\n\r\n}\r\n\r\n\r\n","import { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nimport { ValidationErrors, ValidatorFn } from './Validator';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * This is the base class for `FormControl`, `FormGroup.ts`, and `FormArray`.\r\n *\r\n * It provides some of the shared behavior that all controls and groups of controls have, like\r\n * running validators, calculating status, and resetting state. It also defines the properties\r\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\r\n * instantiated directly.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nexport abstract class AbstractControl {\r\n\r\n  public readonly configuration: ControlConfig | FormConfigs;\r\n\r\n  /** @internal */\r\n  public readonly pendingValue: any;\r\n\r\n  /**\r\n   * The current value of the control.\r\n   *\r\n   * * For a `FormControl`, the current value.\r\n   * * For a `FormGroup`, the values of enabled controls as an object with a key-value pair for each member of the group.\r\n   * * For a `FormArray`, the values of enabled controls as an array.\r\n   *\r\n   */\r\n  public readonly value: any;\r\n\r\n  /**\r\n   * An object containing any errors generated by failing validation,\r\n   * or null if there are no errors.\r\n   */\r\n\r\n  public readonly errors: ValidationErrors | null;\r\n\r\n  /**\r\n   * True if the control is marked as `touched`.\r\n   *\r\n   * A control is marked `touched` once the user has triggered\r\n   * a `blur` event on it.\r\n   */\r\n  public readonly touched: boolean = false;\r\n\r\n  /**\r\n   * A control is `pristine` if the user has not yet changed the value in the UI.\r\n   *\r\n   * @returns True if the user has not yet changed the value in the UI; compare `dirty`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  public readonly pristine: boolean = true;\r\n\r\n  /**\r\n   * The validation status of the control. There are four possible\r\n   * validation status values:\r\n   *\r\n   * * **VALID**: This control has passed all validation checks.\r\n   * * **INVALID**: This control has failed at least one validation check.\r\n   * * **PENDING**: This control is in the midst of conducting a validation check.\r\n   * * **DISABLED**: This control is exempt from validation checks.\r\n   *\r\n   * These status values are mutually exclusive, so a control cannot be both valid AND invalid or invalid AND disabled.\r\n   */\r\n  public readonly status: string;\r\n\r\n  public readonly validator: ValidatorFn | null;\r\n\r\n  public readonly asyncValidator: ValidatorFn | null;\r\n\r\n  public _asyncValidationSubscription: any;\r\n\r\n  private _parent: FormGroup;\r\n\r\n  /**\r\n   * @description\r\n   * Emits an event when the form submission has been triggered.\r\n   */\r\n\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the value of the control changes, in\r\n   * the UI or programmatically.\r\n   */\r\n  public readonly valueChanges: Observable<any>;\r\n\r\n  /**\r\n   * A multicasting observable that emits an event every time the validation `status` of the control\r\n   * recalculates.\r\n   */\r\n  public readonly statusChanges: Observable<any>;\r\n\r\n\r\n  /**\r\n   * A control is `enabled` as long as its `status` is not `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has any status other than 'DISABLED',\r\n   * false if the status is 'DISABLED'.\r\n   *\r\n   */\r\n  get enabled(): boolean {\r\n    return this.status !== DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `disabled` when its `status` is `DISABLED`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * Disabled controls are exempt from validation checks and\r\n   * are not included in the aggregate value of their ancestor\r\n   * controls.\r\n   *\r\n   * @returns True if the control is disabled, false otherwise.\r\n   */\r\n  get disabled(): boolean {\r\n    return this.status === DISABLED;\r\n  }\r\n\r\n  /**\r\n   * A control is `valid` when its `status` is `VALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if the control has passed all of its validation tests,\r\n   * false otherwise.\r\n   */\r\n  get valid(): boolean {\r\n    return this.status === VALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `invalid` when its `status` is `INVALID`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control has failed one or more of its validation checks,\r\n   * false otherwise.\r\n   */\r\n  get invalid(): boolean {\r\n    return this.status === INVALID;\r\n  }\r\n\r\n  /**\r\n   * A control is `pending` when its `status` is `PENDING`.\r\n   *\r\n   * @see `status`\r\n   *\r\n   * @returns True if this control is in the process of conducting a validation check,\r\n   * false otherwise.\r\n   */\r\n  get pending(): boolean {\r\n    return this.status === PENDING;\r\n  }\r\n\r\n  /**\r\n   * A control is `dirty` if the user has changed the value\r\n   * in the UI.\r\n   *\r\n   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.\r\n   * Programmatic changes to a control's value do not mark it dirty.\r\n   */\r\n  get dirty(): boolean {\r\n    return !this.pristine;\r\n  }\r\n\r\n\r\n  /**\r\n   * The parent control.\r\n   */\r\n  get parent(): FormGroup {\r\n    return this._parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Marks the control as `touched`. A control is touched by focus and\r\n   * blur events that do not change the value; compare `markAsDirty`;\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsTouched(): void {\r\n    (this as { touched: boolean }).touched = true;\r\n\r\n    this.updateValueAndValidity({ onlySelf: true });\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `untouched`.\r\n   *\r\n   * If the control has any children, also marks all children as `untouched`\r\n   * and recalculates the `touched` status of all parent controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after the marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsUntouched(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { touched: boolean }).touched = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `dirty`. A control becomes dirty when\r\n   * the control's value is changed through the UI; compare `markAsTouched`.\r\n   *\r\n   *  @param opts Configuration options that determine how the control propagates changes\r\n   * and emits events after marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false.\r\n   */\r\n  markAsDirty(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = false;\r\n  }\r\n\r\n  /**\r\n   * Marks the control as `pristine`.\r\n   *\r\n   * If the control has any children, marks all children as `pristine`,\r\n   * and recalculates the `pristine` status of all parent\r\n   * controls.\r\n   *\r\n   *  @param opts Configuration options that determine how the control emits events after\r\n   * marking is applied.\r\n   * * `onlySelf`: When true, mark only this control. When false or not supplied,\r\n   * marks all direct ancestors. Default is false..\r\n   */\r\n  markAsPristine(opts: { onlySelf?: boolean } = {}): void {\r\n    (this as { pristine: boolean }).pristine = true;\r\n  }\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  /**\r\n   * @param parent Sets the parent of the control\r\n   */\r\n  setParent(parent: FormGroup): void {\r\n    this._parent = parent;\r\n  }\r\n\r\n\r\n  /**\r\n   * Recalculates the value and validation status of the control.\r\n   *\r\n   * By default, it also updates the value and validity of its ancestors.\r\n   *\r\n   * @param opts Configuration options determine how the control propagates changes and emits events\r\n   * after updates and validity checks are applied.\r\n   * * `onlySelf`: When true, only update this control. When false or not supplied,\r\n   * update all direct ancestors. Default is false..\r\n   * * `emitEvent`: When true or not supplied (the default), emit the `valueChanges` event\r\n   * observables emit events with the latest status and value when the control is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  updateValueAndValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._setInitialStatus();\r\n    this._updateValue();\r\n    if (this.enabled) {\r\n      this._updateValidity(opts);\r\n\r\n    }\r\n\r\n\r\n    if (opts.emitEvent !== false) {\r\n      (this.valueChanges as EventEmitter<any>).emit(this.value);\r\n      (this.statusChanges as EventEmitter<any>).emit(this.status);\r\n    }\r\n\r\n    if (this._parent && !opts.onlySelf) {\r\n      this._parent.updateValueAndValidity(opts);\r\n    }\r\n\r\n  }\r\n\r\n  storeConfig = (config: ControlConfig | FormConfigs) => {\r\n    (this as { configuration: ControlConfig | FormConfigs }).configuration = config;\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n  }\r\n\r\n\r\n  private _setInitialStatus() {\r\n    (this as { status: string }).status = this._allControlsDisabled() ? DISABLED : VALID;\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateControlsErrors(emitEvent: boolean): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (emitEvent) {\r\n      (this.statusChanges as EventEmitter<string>).emit(this.status);\r\n    }\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  abstract _calculateStatus(): string\r\n\r\n\r\n  /**\r\n   * Sets the value of the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract setValue(value: any, options?: Object): void;\r\n\r\n  /**\r\n   * Resets the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract reset(value?: any, options?: Object): void;\r\n\r\n  /**\r\n   * Clear the control. Abstract method (implemented in sub-classes).\r\n   */\r\n  abstract clear(options?: Object): void;\r\n\r\n  /** @internal */\r\n  abstract _allControlsDisabled(): boolean;\r\n}\r\n\r\n\r\n/**\r\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const VALID = 'VALID';\r\n\r\n/**\r\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\r\n *\r\n * @see `status`\r\n */\r\nexport const INVALID = 'INVALID';\r\n\r\n/**\r\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\r\n * errors are not yet available for the input value.\r\n *\r\n * @see `markAsPending`\r\n * @see `status`\r\n */\r\nexport const PENDING = 'PENDING';\r\n\r\n/**\r\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\r\n * calculations of validity or value.\r\n *\r\n * @see `markAsDisabled`\r\n * @see `status`\r\n */\r\nexport const DISABLED = 'DISABLED';\r\n\r\nexport type FormHooks = 'change' | 'blur' | 'submit';\r\n","import { FormControl } from './FormControl';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport _ from 'lodash';\r\nimport { Form } from '@angular/forms';\r\nimport { map } from 'rxjs/operators';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\n\r\nexport interface ValidationErrors {\r\n  [key: string]: any\r\n}\r\n\r\nexport interface ValidationConfigs {\r\n  required?: true | String,\r\n  email?: true | String,\r\n  stringLength?: {\r\n    min?: number,\r\n    max?: number,\r\n    message?: string\r\n  },\r\n\r\n  equalTo?: { compare?: string, message?: string } | string,\r\n\r\n  [name: string]: ValidatorType\r\n}\r\n\r\n\r\nexport type ValidatorType = { message?: any, [name: string]: any }\r\n  | string\r\n  | true\r\n  | ValidatorFn\r\n  | AsyncValidatorFn\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ValidatorFn {\r\n  (control: FormControl): ValidationErrors | null\r\n}\r\n\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface AsyncValidatorFn {\r\n  (control: FormControl): Observable<ValidationErrors | null>;\r\n}\r\n\r\n/**\r\n * @description\r\n * Provides a set of built-in validators that can be used by form controls.\r\n *\r\n * A validator is a function that processes a `FormControl` or collection of\r\n * controls and returns an error map or null. A null map means that validation has passed.\r\n * @publicApi\r\n */\r\n// @dynamic\r\nexport class Validators {\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control have a non-empty value.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field is non-empty\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('', Validators.required);\r\n   *\r\n   * console.log(control.errors); // {required: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `required` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static required = (c: FormControl): ValidationErrors | null =>\r\n    isEmptyInputValue(c.value) ? { 'required': true } : null;\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the control's value pass an email validation test.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field matches a valid email pattern\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('bad@', Validators.email);\r\n   *\r\n   * console.log(control.errors); // {email: true}\r\n   * ```\r\n   *\r\n   * @returns An error map with the `email` property\r\n   * if the validation check fails, otherwise `null`.\r\n   *\r\n   */\r\n  static email = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n    return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Validator that requires the length of the control's value to be greater than or equal\r\n   * to the provided minimum length. This validator is also provided by default if you use the\r\n   * the HTML5 `minlength` attribute.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Validate that the field has a minimum of 3 characters\r\n   *\r\n   * ```typescript\r\n   * const control = new FormControl('ng', Validators.minLength(3));\r\n   *\r\n   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <input minlength=\"5\">\r\n   * ```\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * `minlength` if the validation check fails, otherwise `null`.\r\n   */\r\n  static stringLength = (control: FormControl): ValidationErrors | null => {\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    if (controlConfig.type !== ('input' || 'textarea')) {\r\n      throw new Error(`'stringLength' validator can only be used with control type 'input' or 'textarea'`);\r\n    }\r\n\r\n    const\r\n      min: number = controlConfig.validators['stringLength'].min,\r\n      max: number = controlConfig.validators['stringLength'].max,\r\n      length: number = control.value ? control.value.length : 0;\r\n\r\n    if (length < min) {\r\n      return {\r\n        'stringLength': {\r\n          'minLength': min,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    if (length > max) {\r\n      return {\r\n        'stringLength': {\r\n          'maxLength': max,\r\n          'actualLength': length\r\n        }\r\n      };\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n\r\n  static equalTo = (control: FormControl): ValidationErrors | null => {\r\n\r\n    if (isEmptyInputValue(control.value)) {\r\n      return null;  // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    const controlConfig = <ControlConfig>control.configuration;\r\n\r\n    const compareWith = _.isString(controlConfig.validators['equalTo']) ? controlConfig.validators['equalTo'] : controlConfig.validators['equalTo'].compare;\r\n\r\n    const compared_control = control.parent.controls[compareWith];\r\n\r\n    return (JSON.stringify(control.value) === JSON.stringify(compared_control.value))\r\n      ? null : { equalTo: controlConfig.validators['equalTo'] };\r\n  };\r\n\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple validators into a single function that returns the union\r\n   * of the individual error maps for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error maps of the validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static compose = (validators: (ValidatorFn | null | undefined)[] | null): ValidatorFn | null => {\r\n    if (!validators) return null;\r\n    const presentValidators: ValidatorFn[] = validators.filter(isPresent) as any;\r\n    if (presentValidators.length === 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      return _mergeErrors(_executeValidators(control, presentValidators));\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @description\r\n   * Compose multiple async validators into a single function that returns the union\r\n   * of the individual error objects for the provided control.\r\n   *\r\n   * @returns A validator function that returns an error map with the\r\n   * merged error objects of the async validators if the validation check fails, otherwise `null`.\r\n   */\r\n  static composeAsync(asyncValidators: AsyncValidatorFn[]): AsyncValidatorFn | null {\r\n    if (!asyncValidators) return null;\r\n    const presentValidators: AsyncValidatorFn[] = asyncValidators.filter(isPresent) as any;\r\n    if (presentValidators.length == 0) return null;\r\n\r\n    return function(control: FormControl) {\r\n      const observables = _executeAsyncValidators(control, presentValidators);\r\n\r\n      return forkJoin(observables).pipe(\r\n        map(_mergeErrors)\r\n      );\r\n\r\n    };\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _isBoxedValue(validator_configs: { [key: string]: any } | true | ValidatorFn | AsyncValidatorFn): boolean {\r\n    return _.isPlainObject(validator_configs);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nconst EMAIL_REGEXP =\r\n  /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n\r\n\r\nfunction isEmptyInputValue(value: any): boolean {\r\n  // we don't check for string here so it also works with arrays\r\n  return value == null || value.length === 0;\r\n}\r\n\r\nfunction isPresent(o: any): boolean {\r\n  return o != null;\r\n}\r\n\r\nfunction _executeValidators(control: FormControl, validators: ValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _executeAsyncValidators(control: FormControl, validators: AsyncValidatorFn[]): any[] {\r\n  return validators.map(v => v(control));\r\n}\r\n\r\nfunction _mergeErrors(arrayOfErrors: ValidationErrors[]): ValidationErrors | null {\r\n  const errors: { [key: string]: any } =\r\n    _.reduce(arrayOfErrors, (result: ValidationErrors | null, err: ValidationErrors | null) => {\r\n      return err ? { ...result, ...err } : result;\r\n    }, {});\r\n\r\n  return Object.keys(errors).length === 0 ? null : errors;\r\n\r\n}\r\n","import { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\nimport { AsyncValidatorFn, ValidationConfigs, ValidationErrors, ValidatorFn, Validators } from './Validator';\r\nimport _ from 'lodash';\r\nimport { FormGroup } from '../models/FormGroup';\r\n\r\n\r\n/**\r\n * Tracks the value and validation status of an individual form control.\r\n *\r\n * This is one of the three fundamental building blocks of Angular forms, along with\r\n * `FormGroup.ts` and `FormArray`. It extends the `IonarAbstractControl` class that\r\n * implements most of the base functionality for accessing the value, validation status,\r\n * user interactions and events.\r\n *\r\n * @see `IonarAbstractControl`\r\n * @see [Reactive Forms Guide](guide/reactive-forms)\r\n * @see [Usage Notes](#usage-notes)\r\n *\r\n * @usageNotes\r\n *\r\n * ### Initializing Form Controls\r\n *\r\n * Instantiate a `FormControl`, with an initial value.\r\n *\r\n * ```ts\r\n * const control = new FormControl('some value');\r\n * console.log(control.value);     // 'some value'\r\n *```\r\n *\r\n * The following example initializes the control with a form state object. The `value`\r\n * and `disabled` keys are required in this case.\r\n *\r\n * ```ts\r\n * const control = new FormControl({ value: 'n/a', disabled: true });\r\n * console.log(control.value);     // 'n/a'\r\n * console.log(control.status);    // 'DISABLED'\r\n * ```\r\n *\r\n * The following example initializes the control with a sync validator.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', Validators.required);\r\n * console.log(control.value);      // ''\r\n * console.log(control.status);     // 'INVALID'\r\n * ```\r\n *\r\n * The following example initializes the control using an options object.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', {\r\n *    validators: Validators.required,\r\n *    asyncValidators: myAsyncValidator\r\n * });\r\n * ```\r\n *\r\n * ### Configure the control to update on a blur event\r\n *\r\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'blur' });\r\n * ```\r\n *\r\n * ### Configure the control to update on a submit event\r\n *\r\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\r\n *\r\n * ```ts\r\n * const control = new FormControl('', { updateOn: 'submit' });\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value\r\n *\r\n * You reset to a specific form state by passing through a standalone\r\n * value or a form state object that contains both a value and a disabled state\r\n * (these are the only two properties that cannot be calculated).\r\n *\r\n * ```ts\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n *\r\n * control.reset('Drew');\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * ```\r\n *\r\n * ### Reset the control back to an initial value and disabled\r\n *\r\n * ```\r\n * const control = new FormControl('Nancy');\r\n *\r\n * console.log(control.value); // 'Nancy'\r\n * console.log(control.status); // 'VALID'\r\n *\r\n * control.reset({ value: 'Drew', disabled: true });\r\n *\r\n * console.log(control.value); // 'Drew'\r\n * console.log(control.status); // 'DISABLED'\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormControl extends AbstractControl {\r\n\r\n\r\n  /**\r\n   * Creates a new `FormControl` instance.\r\n   *\r\n   * @param configs Initializes the control with an object that defines the initial state.\r\n   *\r\n   */\r\n  constructor(configs: ControlConfig) {\r\n    super();\r\n\r\n    this.storeConfig(configs as ControlConfig);\r\n    this._setValidators(configs.validators);\r\n    this._setAsyncValidators(configs.asyncValidator);\r\n    this._initObservables();\r\n    this._applyControlState();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets a new value for the form control.\r\n   *\r\n   * @param value The new value for the control.\r\n   * @param options Configuration options that determine how the control proopagates changes\r\n   * and emits events when the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\r\n   * `onChange` event to\r\n   * update the view.\r\n   * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\r\n   * `ngModelChange`\r\n   * event to update the model.\r\n   *\r\n   */\r\n  setValue(value: any, options: {\r\n    onlySelf?: boolean,\r\n    emitEvent?: boolean\r\n  } = {}): void {\r\n    (this as { value: any }).value = value;\r\n    this.markAsDirty();\r\n    this.updateValueAndValidity(options);\r\n\r\n    if (_.has((<ControlConfig>this.configuration).props, ['submitOnChange']) || _.has(<FormConfigs>this.parent.configuration, ['submitOnChange'])) {\r\n\r\n      this.parent.submit(true);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  reset(value: any = null, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    this._applyControlState();\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the form control, marking it `pristine` and `untouched`, and setting\r\n   * the value to null.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   *\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this.markAsPristine(options);\r\n    this.markAsUntouched(options);\r\n    (this as { value: any }).value = null;\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets errors on a form control when running validations manually, rather than automatically.\r\n   *\r\n   * Calling `setErrors` also updates the validity of the parent control.\r\n   *\r\n   * @usageNotes\r\n   * ### Manually set the errors for a control\r\n   *\r\n   * ```\r\n   * const login = new FormControl('someLogin');\r\n   * login.setErrors({\r\n   *   notUnique: true\r\n   * });\r\n   *\r\n   * expect(login.valid).toEqual(false);\r\n   * expect(login.errors).toEqual({ notUnique: true });\r\n   *\r\n   * login.setValue('someOtherLogin');\r\n   *\r\n   * expect(login.valid).toEqual(true);\r\n   * ```\r\n   */\r\n  setErrors(errors: ValidationErrors | null, opts: { emitEvent?: boolean } = {}): void {\r\n    (this as { errors: ValidationErrors | null }).errors = errors;\r\n    this._updateControlsErrors(opts.emitEvent !== false);\r\n  }\r\n\r\n\r\n  _runValidator(): ValidationErrors | null {\r\n    return this.validator ? this.validator(this) : null;\r\n  }\r\n\r\n\r\n  _runAsyncValidator = _.debounce((emitEvent?: boolean) => {\r\n\r\n    if (this.asyncValidator) {\r\n      (this as { status: string }).status = PENDING;\r\n      const obs = this.asyncValidator(this);\r\n      this._asyncValidationSubscription =\r\n        obs.subscribe((errors: ValidationErrors | null) => {\r\n          if ((this.touched || this.dirty) && this.value) {\r\n            (this as { status: string }).status = INVALID;\r\n            this.setErrors(errors, { emitEvent });\r\n          }\r\n        });\r\n    }\r\n  }, 500);\r\n\r\n  _cancelExistingSubscription(): void {\r\n    if (this._asyncValidationSubscription) {\r\n      this._asyncValidationSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets the synchronous validators that are active on this control.  Calling\r\n   * this overwrites any existing sync validators.\r\n   */\r\n  private _setValidators = (validators: ValidationConfigs | null) => {\r\n\r\n    (this as { validator: ValidatorFn | null }).validator = coerceToValidator(validators);\r\n\r\n  };\r\n\r\n  /**\r\n   * Sets the async validators that are active on this control. Calling this\r\n   * overwrites any existing async validators.\r\n   */\r\n  private _setAsyncValidators = (asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): void => {\r\n    (this as { asyncValidator: ValidatorFn | null }).asyncValidator = coerceToAsyncValidator(asyncValidators);\r\n  };\r\n\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n\r\n    if (this.disabled) return DISABLED;\r\n    if (this.errors) return INVALID;\r\n    if (this.pending) return PENDING;\r\n\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    this._cancelExistingSubscription();\r\n    (this as { errors: ValidationErrors | null }).errors = this._runValidator();\r\n    (this as { status: string }).status = this._calculateStatus();\r\n\r\n    if (this.status === VALID || this.status === PENDING) {\r\n      this._runAsyncValidator(opts.emitEvent);\r\n    }\r\n  }\r\n\r\n\r\n  private _applyControlState = () => {\r\n\r\n    (this as { value: any }).value = (<ControlConfig>this.configuration).value || null;\r\n    // state.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\r\n    //         this.enable({onlySelf: true, emitEvent: false});\r\n  };\r\n\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  _allControlsDisabled(): boolean {\r\n    return this.disabled;\r\n  }\r\n}\r\n\r\n\r\nfunction coerceToValidator(validators: ValidationConfigs): ValidatorFn | null {\r\n\r\n  return Validators.compose(convertToValidatorFn(validators));\r\n};\r\n\r\nfunction convertToValidatorFn(validators: ValidationConfigs): ValidatorFn[] {\r\n  return _.map(validators, (value, key) => {\r\n    if (!_.has(Validators, key)) return null;\r\n\r\n    return Validators[key];\r\n  });\r\n}\r\n\r\nfunction coerceToAsyncValidator(asyncValidators: AsyncValidatorFn | AsyncValidatorFn[] | null): AsyncValidatorFn | null {\r\n\r\n  return _.isArray(asyncValidators) ? Validators.composeAsync(_.map(asyncValidators, (value: AsyncValidatorFn, key): AsyncValidatorFn | null => value)) : asyncValidators || null;\r\n};\r\n","import _ from 'lodash';\r\nimport { AbstractControl, DISABLED, INVALID, PENDING, VALID } from './AbstractControl';\r\nimport { Observable } from 'rxjs';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { FormControl } from './FormControl';\r\nimport { ControlConfig, FormConfigs } from './ControlConfig';\r\n\r\n/**\r\n * Tracks the value and validity state of a group of `FormControl` instances.\r\n *\r\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\r\n * with each control name as the key.  It calculates its status by reducing the status values\r\n * of its children. For example, if one of the controls in a group is invalid, the entire\r\n * group becomes invalid.\r\n *\r\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\r\n * along with `FormControl` and `FormArray`.\r\n *\r\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\r\n * argument. The key for each child registers the name for the control.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Create a form group with 2 controls\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   first: new FormControl('Nancy', Validators.minLength(2)),\r\n *   last: new FormControl('Drew'),\r\n * });\r\n *\r\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\r\n * console.log(form.status);  // 'VALID'\r\n * ```\r\n *\r\n * ### Create a form group with a group-level validator\r\n *\r\n * You include group-level validators as the second arg, or group-level async\r\n * validators as the third arg. These come in handy when you want to perform validation\r\n * that considers the value of more than one child control.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('', Validators.minLength(2)),\r\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\r\n * }, passwordMatchValidator);\r\n *\r\n *\r\n * function passwordMatchValidator(g: FormGroup) {\r\n *    return g.get('password').value === g.get('passwordConfirm').value\r\n *       ? null : {'mismatch': true};\r\n * }\r\n * ```\r\n *\r\n * Like `FormControl` instances, you choose to pass in\r\n * validators and async validators as part of an options object.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('')\r\n *   passwordConfirm: new FormControl('')\r\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\r\n * ```\r\n *\r\n * ### Set the updateOn property for all controls in a form group\r\n *\r\n * The options object is used to set a default value for each child\r\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\r\n * group level, all child controls default to 'blur', unless the child\r\n * has explicitly specified a different `updateOn` value.\r\n *\r\n * ```ts\r\n * const c = new FormGroup({\r\n *   one: new FormControl()\r\n * }, { updateOn: 'blur' });\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport class FormGroup extends AbstractControl {\r\n\r\n  private _readonly: Boolean = false;\r\n\r\n  public readonly ngSubmit: EventEmitter<any>;\r\n\r\n  get readonly(): Boolean {\r\n    return this._readonly;\r\n  }\r\n\r\n  set readonly(status: Boolean) {\r\n\r\n    this._readonly = status;\r\n\r\n    this.updateValueAndValidity({ emitEvent: true });\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * Reports whether the form submission has been triggered.\r\n   */\r\n  public readonly submitted: boolean = false;\r\n\r\n  /**\r\n   *\r\n   * @param controls A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n\r\n  public readonly controls: { [key: string]: FormControl } = {};\r\n\r\n\r\n  /**\r\n   * Creates a new `FormGroup` instance.\r\n   *\r\n   * @param formState A collection of child controls. The key for each child is the name\r\n   * under which it is registered.\r\n   *\r\n   */\r\n  constructor(public formState: ControlConfig[], public formConfigs: FormConfigs) {\r\n    super();\r\n    this.storeConfig(<FormConfigs>formConfigs);\r\n    this._setUpControls();\r\n    this._initObservables();\r\n    this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n    this._applyFormState();\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the `FormGroup`. It accepts an object that matches\r\n   * the structure of the group, with control names as keys.\r\n   *\r\n   * @usageNotes\r\n   * ### Set the complete value for the form group\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl(),\r\n   *   last: new FormControl()\r\n   * });\r\n   *\r\n   * console.log(form.value);   // {first: null, last: null}\r\n   *\r\n   * form.setValue({first: 'Nancy', last: 'Drew'});\r\n   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\r\n   * ```\r\n   *\r\n   * @throws When strict checks fail, such as setting the value of a control\r\n   * that doesn't exist or if you excluding the value of a control.\r\n   *\r\n   * @param value The new value for the control that matches the structure of the group.\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events after the value changes.\r\n   * The configuration options are passed to the {@link IonarAbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control value is updated.\r\n   * When false, no events are emitted.\r\n   */\r\n  setValue(value: { [key: string]: any }, options: { onlySelf?: boolean, emitEvent?: boolean } = {}):\r\n    void {\r\n\r\n    _.forOwn(value, (value, name) => {\r\n      this._throwIfControlMissing(name);\r\n      this.controls[name].setValue(value, { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n\r\n\r\n    this.updateValueAndValidity(options);\r\n  }\r\n\r\n  /**\r\n   * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  reset(value: any = {}, options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n\r\n  }\r\n\r\n  /**\r\n   * Clear the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\r\n   * the value of all descendants to null.\r\n   *\r\n   * You reset to a specific form state by passing in a map of states\r\n   * that matches the structure of your form, with control names as keys. The state\r\n   * is a standalone value or a form state object with both a value and a disabled\r\n   * status.\r\n   *\r\n   * @param formState Resets the control with an initial value,\r\n   * or an object that defines the initial value and disabled state.\r\n   *\r\n   * @param options Configuration options that determine how the control propagates changes\r\n   * and emits events when the group is reset.\r\n   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\r\n   * false.\r\n   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\r\n   * `valueChanges`\r\n   * observables emit events with the latest status and value when the control is reset.\r\n   * When false, no events are emitted.\r\n   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity\r\n   * updateValueAndValidity} method.\r\n   *\r\n   * @usageNotes\r\n   *\r\n   * ### Reset the form group values\r\n   *\r\n   * ```ts\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * console.log(form.value);  // {first: 'first name', last: 'last name'}\r\n   *\r\n   * form.reset({ first: 'name', last: 'last name' });\r\n   *\r\n   * console.log(form.value);  // {first: 'name', last: 'last name'}\r\n   * ```\r\n   *\r\n   * ### Reset the form group values and disabled status\r\n   *\r\n   * ```\r\n   * const form = new FormGroup({\r\n   *   first: new FormControl('first name'),\r\n   *   last: new FormControl('last name')\r\n   * });\r\n   *\r\n   * form.reset({\r\n   *   first: {value: 'name', disabled: true},\r\n   *   last: 'last'\r\n   * });\r\n   *\r\n   * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n   * console.log(this.form.get('first').status);  // 'DISABLED'\r\n   * ```\r\n   */\r\n  clear(options: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    _.each(_.keys(this.controls), name => {\r\n      this.controls[name].clear({ onlySelf: true, emitEvent: options.emitEvent });\r\n    });\r\n    (this as { submitted: Boolean }).submitted = false;\r\n    this.updateValueAndValidity(options);\r\n    if (_.has(<FormConfigs>this.configuration, ['submitOnChange'])) this.submit(true);\r\n  }\r\n\r\n\r\n  /**\r\n   * Retrieves a child control given the control's name or path.\r\n   *\r\n   * @param name A dot-delimited string or array of string/number values that define the path to the\r\n   * control.\r\n   *\r\n   * @usageNotes\r\n   * ### Retrieve a nested control\r\n   *\r\n   * For example, to get a `name` control nested within a `person` sub-group:\r\n   *\r\n   * * `this.form.get('person.name');`\r\n   *\r\n   * -OR-\r\n   *\r\n   * * `this.form.get(['person', 'name']);`\r\n   */\r\n  get(name: string = null): FormControl | null {\r\n    if (name == null) return null;\r\n\r\n    return this.controls.hasOwnProperty(name as string) ? this.controls[name] : null;\r\n  }\r\n\r\n  submit(instant: boolean = false): void {\r\n    (this as { submitted: Boolean }).submitted = true;\r\n    this.updateValueAndValidity();\r\n    (this as { ngSubmit: EventEmitter<any> }).ngSubmit.emit({\r\n      value: this.value, instant\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  _calculateStatus(): string {\r\n    // // if (this._allControlsDisabled()) return DISABLED;\r\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\r\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\r\n    return VALID;\r\n  }\r\n\r\n  /** @internal */\r\n  _setUpControls(): void {\r\n    _.each(this.formState, (c: ControlConfig) => {\r\n      this.controls[c.name] = new FormControl(c);\r\n      this.controls[c.name].setParent(this);\r\n    });\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _initObservables() {\r\n    (this as { valueChanges: Observable<any> }).valueChanges = new EventEmitter();\r\n    (this as { statusChanges: Observable<any> }).statusChanges = new EventEmitter();\r\n    (this as { ngSubmit: Observable<any> }).ngSubmit = new EventEmitter();\r\n  }\r\n\r\n\r\n  /** @internal */\r\n  _updateValue(): void {\r\n    (this as { value: any }).value = this._reduceValue();\r\n\r\n\r\n  }\r\n\r\n  /** @internal */\r\n  _updateValidity(opts: { onlySelf?: boolean, emitEvent?: boolean } = {}): void {\r\n    (this as { status: string }).status = this._calculateStatus();\r\n  }\r\n\r\n  /** @internal */\r\n  _reduceValue() {\r\n    const form_value: { [k: string]: AbstractControl } = {};\r\n    _.each(_.keys(this.controls), k => {\r\n      if (this._isNotExcluded(this.controls[k])) {\r\n        form_value[k] = this.controls[k].value;\r\n      }\r\n    });\r\n    return form_value;\r\n  }\r\n\r\n  private _applyFormState = () => {\r\n    this.readonly = _.has(this.formConfigs, ['readonly']);\r\n  };\r\n\r\n  /** @internal */\r\n  _allControlsDisabled(): boolean {\r\n    return _.every(this.controls, (c: AbstractControl) => c.disabled);\r\n  }\r\n\r\n  /** @internal */\r\n  _anyControlsHaveStatus(status: string): boolean {\r\n\r\n    return !!_.find(this.controls, ['status', status]);\r\n  }\r\n\r\n  _isNotExcluded = (c: FormControl): Boolean => {\r\n\r\n    return !_.get(c.configuration, 'props.exclude') && !(_.has(this.formConfigs, ['nullExclusion']) && !c.value);\r\n\r\n  };\r\n\r\n  /** @internal */\r\n  _throwIfControlMissing(name: string): void {\r\n    if (!_.keys(this.controls).length) {\r\n      throw new Error(`\r\n        There are no form controls registered with this group yet.  If you're using ngModel,\r\n        you may want to check next tick (e.g. use setTimeout).\r\n      `);\r\n    }\r\n    if (!this.controls[name]) {\r\n      throw new Error(`Cannot find form control with name: ${name}.`);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component, Directive, Input,\r\n  OnInit, TemplateRef, ViewContainerRef\r\n} from '@angular/core';\r\n\r\n\r\n@Directive({\r\n  selector: '[fieldTemplate]'\r\n})\r\nexport class FieldTemplateDirective implements OnInit, AfterViewInit {\r\n\r\n  @Input() name: any = '';\r\n\r\n  constructor(\r\n    private _vcRef: ViewContainerRef,\r\n    private _tplRef: TemplateRef<any>\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._vcRef.clear();\r\n  }\r\n}\r\n","import {\r\n  AfterContentChecked,\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges, ViewChild\r\n} from '@angular/core';\r\nimport { FormService } from './providers/form.service';\r\n\r\nimport { FormGroup } from './models/FormGroup';\r\nimport { FormControl } from './models/FormControl';\r\nimport { ControlComponent } from './components/control.component';\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@Component({\r\n  selector: 'io-form',\r\n  template: `\r\n      <ng-container>\r\n          <ng-template #contentVc>\r\n              <ng-content></ng-content>\r\n          </ng-template>\r\n\r\n          <ng-container *ngIf=\"viewInitialized\">\r\n\r\n              <ng-container *ngIf=\"!default_template\">\r\n                  <ng-container [ngTemplateOutlet]=\"contentVc\"></ng-container>\r\n              </ng-container>\r\n\r\n              <ng-container *ngIf=\"default_template\">\r\n                  <ng-container *ngFor=\"let name of controlRoster\">\r\n                      <form-control\r\n                              [name]=\"name\"\r\n                              [formGroup]=\"formGroup\"\r\n                      >\r\n                      </form-control>\r\n                  </ng-container>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n\r\n      </ng-container>\r\n\r\n\r\n\r\n  `,\r\n  styles: [`\r\n\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [FormService]\r\n})\r\n\r\nexport  class FormComponent implements AfterViewChecked, OnDestroy {\r\n\r\n  @Input() formGroup: FormGroup;\r\n\r\n  @Input() mediaType: String;\r\n  @Output() submit = new EventEmitter();\r\n\r\n  @ViewChild('contentVc', { read: ElementRef }) protected _contentVcRef;\r\n\r\n  @ContentChildren(FieldTemplateDirective) _fieldTemplateDirList;\r\n\r\n  controlRoster: string[];\r\n\r\n  controls: FormControl[];\r\n\r\n  default_template: Boolean;\r\n\r\n  viewInitialized: Boolean = false;\r\n\r\n  protected _subscription: Subscription;\r\n\r\n  constructor(protected _formSvs: FormService, protected cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n\r\n    if (this.formGroup) {\r\n\r\n      this.parseContext();\r\n      this.viewInitialized = true;\r\n      this.cd.detectChanges();\r\n      if (!this.default_template) {\r\n        this.default_template = this._contentVcRef.nativeElement.parentElement.children.length === 0;\r\n      }\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n\r\n  parseContext = () => {\r\n    this._formSvs.initialize(this.formGroup);\r\n    this.controlRoster = _.keys(this.formGroup.controls);\r\n\r\n    this.controls = _.values(this.formGroup.controls);\r\n\r\n    if (this._subscription) this._subscription.unsubscribe();\r\n\r\n    this._subscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this), distinctUntilChanged()).subscribe((data: { value: any, instant: boolean }) => {\r\n\r\n      if (this.formGroup.valid || data.instant) {\r\n\r\n        this.submit.emit(this._formSvs.convertToMediaType(data.value, this.mediaType));\r\n      }\r\n\r\n\r\n    });\r\n  };\r\n\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  Host,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { FormComponent } from '../core.component';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FieldTemplateDirective } from '../directives/field-template.directive';\r\n\r\n@Component({\r\n  selector: 'form-control',\r\n  template: `\r\n\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <form-label *ngIf=\"show_label\"></form-label>\r\n\r\n          <form-field></form-field>\r\n\r\n          <form-feedback *ngIf=\"show_feedback\"></form-feedback>\r\n      </ng-container>\r\n\r\n  `,\r\n\r\n  styles: [`\r\n      :host {\r\n          display: grid;\r\n          grid-template-areas: \"label   field\" \". feedback\";\r\n          grid-template-columns: 3fr 7fr;\r\n          grid-template-rows: 1fr auto;\r\n          margin-bottom: 1rem;\r\n          height: auto;\r\n          visibility: visible;\r\n          z-index: 50;\r\n      }\r\n\r\n      :host-context(.hide-label) {\r\n          grid-template-areas: \"field\" \"feedback\";\r\n          grid-template-columns: 1fr;\r\n      }\r\n\r\n      :host-context(.hide-feedback) {\r\n          grid-template-areas: \"label   field\";\r\n          grid-template-columns: 3fr 7fr;\r\n      }\r\n\r\n      :host-context(.hide-label.hide-feedback) {\r\n          grid-template-areas: \"field\";\r\n      }\r\n\r\n      :host-context(.hidden) {\r\n          display: none !important;\r\n      }\r\n\r\n      form-label {\r\n          grid-area: label;\r\n      }\r\n\r\n      form-field {\r\n          grid-area: field;\r\n      }\r\n\r\n      form-feedback {\r\n          grid-area: feedback;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ControlComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n  @Input() name: any = '';\r\n\r\n  @Input() formGroup: FormGroup;\r\n  _control: FormControl;\r\n\r\n  fieldTemplate: TemplateRef<any>;\r\n\r\n  show_feedback: Boolean = true;\r\n\r\n  show_label: Boolean = true;\r\n\r\n  @ContentChild(FieldTemplateDirective) private _fieldTemplateDir;\r\n\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    public cd: ChangeDetectorRef,\r\n    private _renderer: Renderer2,\r\n    private _elRef: ElementRef,\r\n    @Host() private _parent: FormComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this._checkTemplate();\r\n\r\n    this._control = this.formGroup.get(this.name);\r\n\r\n\r\n    this._renderer.setAttribute(this._elRef.nativeElement, 'id', this.name);\r\n\r\n    const props = (<ControlConfig>this._control.configuration).props;\r\n    if (_.has(props, ['hidden'])) {\r\n\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hidden');\r\n    }\r\n\r\n    if (_.has(props, ['hideLabel'])) {\r\n      this.show_label = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-label');\r\n    }\r\n\r\n\r\n    if (_.has(props, ['hideFeedback'])) {\r\n      this.show_feedback = false;\r\n      this._renderer.addClass(this._elRef.nativeElement, 'hide-feedback');\r\n    }\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n\r\n  private _checkTemplate = () => {\r\n\r\n    const templateData = this._fieldTemplateDir ? this._fieldTemplateDir : _.find(this._parent._fieldTemplateDirList.toArray(), ['name', this.name]);\r\n\r\n    if (templateData) {\r\n\r\n      this.fieldTemplate = templateData._tplRef;\r\n    }\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges, TemplateRef\r\n} from '@angular/core';\r\n\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { untilDestroyed } from '@ionar/utility';\r\n\r\n\r\n@Component({\r\n  selector: 'form-field',\r\n  template: `\r\n      <ng-container *ngIf=\"formGroup\">\r\n          <ng-container\r\n                  dynamic_field\r\n                  [controlConfig]=\"controlConfig\"\r\n\r\n                  [events]=\"{\r\n                            change: onChanged,\r\n                            blur: onTouched,\r\n                            enter: onEntered\r\n                    }\"\r\n                  [template]=\"template\"\r\n\r\n                  [value]=\"control.value\"\r\n                  [options]=\"controlConfig.options\"\r\n                  [invalid]=\"invalid\"\r\n                  [readonly]=\"formGroup.readonly\"\r\n          >\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          width: 100%;\r\n          height: 100%;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FieldComponent implements OnInit, AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  formGroup: FormGroup;\r\n  control: FormControl;\r\n  controlConfig: ControlConfig;\r\n\r\n  invalid: Boolean = false;\r\n  template: TemplateRef<any>\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.parseContext();\r\n    //\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  onChanged = e => {\r\n    this._formSvs.getControl(this._parent.name).setValue(e);\r\n  };\r\n\r\n  onTouched = () => {\r\n    this._formSvs.getControl(this._parent.name).markAsTouched();\r\n  };\r\n\r\n  onEntered = () => {\r\n    // this.formSvs._onEntered()\r\n    // if (this.name === 'password') this.focus = true;\r\n  };\r\n\r\n  parseContext = () => {\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.template = this._parent.fieldTemplate\r\n    this.invalid = this.control.invalid && (this.control.dirty || this.control.touched || this.formGroup.submitted);\r\n    this.cd.detectChanges();\r\n\r\n  };\r\n\r\n}\r\n","import { Directive, ElementRef, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { FormGroup } from '../models/FormGroup';\n\n@Directive({\n  selector: '[submitForm]'\n})\nexport class SubmitDirective implements OnInit, OnDestroy, OnChanges {\n\n  @Input('submitForm') private _formGr: FormGroup;\n  @Input() disabled: Boolean = false;\n\n  @HostListener('click', ['$event'])\n  onClick = (e: MouseEvent) => {\n\n    if (!this.disabled) {\n\n      this._formGr.submit();\n    }\n\n  };\n\n  constructor(private _elRef: ElementRef) {\n\n  }\n\n\n  ngOnInit(): void {\n    // console.log(this._formGr)\n  }\n\n  ngOnChanges() {\n    // console.log(this._formGr)\n  }\n\n  ngOnDestroy() {\n\n  }\n\n\n}\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { ControlConfig } from '../models/ControlConfig';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport _ from 'lodash';\r\nimport { ControlComponent } from './control.component';\r\n\r\n\r\n@Component({\r\n  selector: 'form-label',\r\n  template: `\r\n      {{label}}\r\n  `,\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          align-items: center;\r\n          color: rgba(0, 0, 0, 0.85);\r\n          font-size: 1.6rem;\r\n          font-weight: 700;\r\n          position: relative\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LabelComponent implements OnInit, AfterViewChecked, OnDestroy {\r\n  formGroup: FormGroup;\r\n  controlConfig: ControlConfig;\r\n  control: FormControl;\r\n\r\n  label: any;\r\n\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cd.detach();\r\n  }\r\n\r\n  parseContext = () => {\r\n\r\n    this.control = this.formGroup.get(this._parent.name);\r\n\r\n    this.controlConfig = <ControlConfig>this.control.configuration;\r\n\r\n    this.label = this.controlConfig.label || _.startCase(this._parent.name);\r\n\r\n    this.cd.detectChanges();\r\n  };\r\n}\r\n","import {\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit\r\n} from '@angular/core';\r\nimport { FormService } from '../providers/form.service';\r\n\r\nimport _ from 'lodash';\r\nimport { untilDestroyed } from '@ionar/utility';\r\nimport { FormControl } from '../models/FormControl';\r\nimport { FormGroup } from '../models/FormGroup';\r\nimport { ControlComponent } from './control.component';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'form-feedback',\r\n  template: `\r\n      <ng-container *ngIf=\"show_feedback\">\r\n          <ng-container *ngIf=\"invalid\">\r\n              <ng-container *ngFor=\"let err of error_list\">\r\n                  <div class=\"feedback\">{{err}}</div>\r\n              </ng-container>\r\n\r\n          </ng-container>\r\n      </ng-container>\r\n  `,\r\n  //language=SCSS\r\n  styles: [`\r\n      :host {\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: flex-start;\r\n          width: 100%;\r\n          color: #f5222d;\r\n          font-size: 1.2rem;\r\n          margin-top: 0.5rem;\r\n      }\r\n  `],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FeedbackComponent implements OnInit, OnChanges, AfterViewChecked, OnDestroy {\r\n  ///-----------------------------------------------  Variables   -----------------------------------------------///\r\n\r\n  _control: FormControl;\r\n  formGroup: FormGroup;\r\n\r\n  invalid: Boolean = false;\r\n  error_list: string[] | null;\r\n  show_feedback: Boolean = true;\r\n\r\n\r\n  private _statusSubscription: Subscription;\r\n  private _submitSubscription: Subscription;\r\n\r\n  ///-----------------------------------------------  Life Cycle Hook   -----------------------------------------------///\r\n  constructor(\r\n    private _formSvs: FormService,\r\n    private cd: ChangeDetectorRef,\r\n    @Host() private _parent: ControlComponent\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this._parent.formGroup) {\r\n      this.formGroup = this._parent.formGroup;\r\n\r\n      if (this._statusSubscription) this._statusSubscription.unsubscribe();\r\n      if (this._submitSubscription) this._submitSubscription.unsubscribe();\r\n\r\n      this._statusSubscription = this.formGroup.statusChanges.pipe(untilDestroyed(this)).subscribe(status => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this._submitSubscription = this.formGroup.ngSubmit.pipe(untilDestroyed(this)).subscribe(data => {\r\n        this.parseContext();\r\n      });\r\n\r\n      this.parseContext();\r\n    }\r\n  }\r\n\r\n\r\n  generate_feedback = (validator, value) => {\r\n\r\n    // const feedback = this._control.validateOptions.feedback\r\n\r\n    const feedback = {};\r\n\r\n    // console.log(_.values(this._control.configuration.validators))\r\n\r\n\r\n    // _.mapValues(this._control.configuration.validators, (value: any) => {\r\n    //   feedback[validator] = _.isString(value) ? value : value.message || null;\r\n    // });\r\n\r\n\r\n    if (!validator) return null;\r\n\r\n    switch (validator) {\r\n      case 'required':\r\n        if (this._parent.name === 'confirm_password') {\r\n          return feedback['required'] || `You need to confirm password`;\r\n        }\r\n        return feedback['required'] || `${_.startCase(this._parent.name)}  is required`;\r\n      case 'agreement':\r\n        return feedback['agreement'] || `You must agree to the terms and conditions before continuing!`;\r\n      case 'email' :\r\n        return feedback['email'] || `Invalid email address. Valid e-mail can contain only latin letters, numbers, '@' and '.'`;\r\n      case 'email_existed':\r\n        return feedback['email_existed'] || `${_.startCase(this._parent.name)} is existed! Please use another one`;\r\n\r\n      case 'stringLength' :\r\n\r\n        return value.minLength ? `${_.startCase(this._parent.name)} cannot be shorter than ${value.minLength}` : `${_.startCase(this._parent.name)} cannot be longer than ${value.maxLength}`;\r\n\r\n      case 'equalTo' :\r\n\r\n        return `Confirm password is not equal to password`;\r\n\r\n      default:\r\n        return value;\r\n    }\r\n\r\n\r\n  };\r\n\r\n  ngOnChanges(changes): void {\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ///-----------------------------------------------  Main Functions   -----------------------------------------------///\r\n\r\n  parseContext = () => {\r\n    this._control = this.formGroup.get(this._parent.name);\r\n    this.invalid = this._control.invalid && (this._control.dirty || this._control.touched || this.formGroup.submitted);\r\n    this.error_list = _.map(this._control.errors, (value, key) => this.generate_feedback(key, value));\r\n    this.cd.detectChanges();\r\n  };\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DynamicFieldDirective } from './directives/dynamic-field.directive';\r\n\r\nimport { FieldComponent } from './components/field.component';\r\n\r\nimport { SubmitDirective } from './directives/submit.directive';\r\n\r\n\r\nimport { ControlComponent } from './components/control.component';\r\nimport { LabelComponent } from './components/label.component';\r\nimport { FeedbackComponent } from './components/feedback.component';\r\nimport { FormComponent } from './core.component';\r\nimport { FieldTemplateDirective } from './directives/field-template.directive';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FormComponent,\r\n    FieldComponent, ControlComponent, LabelComponent, FeedbackComponent, FieldTemplateDirective,\r\n    DynamicFieldDirective, SubmitDirective\r\n  ],\r\n\r\n  imports: [CommonModule],\r\n  exports: [\r\n    FormComponent,\r\n    FieldComponent,\r\n    SubmitDirective,\r\n    ControlComponent,\r\n    LabelComponent, FeedbackComponent, FieldTemplateDirective\r\n  ]\r\n})\r\nexport class CoreModule {\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UIModule } from '../ui/ui.module';\nimport { CoreModule } from '../core/core.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    CoreModule,\n    UIModule\n  ],\n  exports: [\n    CoreModule,\n    UIModule\n  ]\n})\nexport class IonarFormModule {\n}\n","import { FormGroup } from '../models/FormGroup';\r\nimport { ControlConfig, FormConfigs } from '../models/ControlConfig';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class IonarFormBuilder {\r\n\r\n\r\n  group = (formState: ControlConfig[], formConfigs?: FormConfigs): FormGroup => {\r\n\r\n    return new FormGroup(formState, formConfigs);\r\n  };\r\n}\r\n\r\n\r\n"],"names":["MenuComponent","tslib_1.__extends","ControlComponent"],"mappings":"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"}
